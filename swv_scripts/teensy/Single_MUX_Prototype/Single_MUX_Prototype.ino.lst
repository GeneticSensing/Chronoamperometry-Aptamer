
/Users/adam/Library/Caches/arduino/sketches/D6F2077E4087E5AAA613A354679618F2/Single_MUX_Prototype.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ec0 	.word	0x20000ec0
6000142c:	200011a0 	.word	0x200011a0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fab5 	bl	60001ad0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa86 	bl	60001ac0 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa6f 	bl	60001ab8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa85 	bl	60001ae8 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	000026e0 	.word	0x000026e0
600015ec:	60001c00 	.word	0x60001c00
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ec0 	.word	0x20000ec0
600015f8:	600042e4 	.word	0x600042e4
600015fc:	20000000 	.word	0x20000000
60001600:	20000c00 	.word	0x20000c00
60001604:	00000dd9 	.word	0x00000dd9
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	000008dd 	.word	0x000008dd
60001618:	20001134 	.word	0x20001134
6000161c:	000008e1 	.word	0x000008e1
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20001138 	.word	0x20001138
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	200011a0 	.word	0x200011a0
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	2000111c 	.word	0x2000111c
60001900:	20001118 	.word	0x20001118
60001904:	20001120 	.word	0x20001120
60001908:	20001124 	.word	0x20001124
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000c00 	.word	0x20000c00
60001918:	00000f65 	.word	0x00000f65

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8d4 	bl	60001ad8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f89d 	bl	60001ac8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f899 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000c00 	.word	0x20000c00
60001a00:	0000114d 	.word	0x0000114d

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	2000115d 	.word	0x2000115d

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <____libc_init_array_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <____libc_init_array_veneer+0x4>
60001abc:	00002689 	.word	0x00002689

60001ac0 <__pwm_init_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__pwm_init_veneer+0x4>
60001ac4:	000024cd 	.word	0x000024cd

60001ac8 <__delay_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__delay_veneer+0x4>
60001acc:	000009bd 	.word	0x000009bd

60001ad0 <__set_arm_clock_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__set_arm_clock_veneer+0x4>
60001ad4:	00002161 	.word	0x00002161

60001ad8 <__usb_init_serialnumber_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__usb_init_serialnumber_veneer+0x4>
60001adc:	000018bd 	.word	0x000018bd

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	000025e5 	.word	0x000025e5

60001ae8 <__main_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__main_veneer+0x4>
60001aec:	00000c31 	.word	0x00000c31

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000105 000004d5                       ........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x26>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0xa0>)
      30:	2601      	movs	r6, #1
      32:	619d      	str	r5, [r3, #24]
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	fa95 f4a5 	rbit	r4, r5
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0x10>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa4>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4c>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa8>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
}
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
      6a:	4798      	blx	r3
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
		MillisTimer *next = waiting->_next;
      6c:	43a5      	bics	r5, r4
		waiting->addToActiveList();
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x36>
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xac>)
	while (waiting) {
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
		waiting = next;
	}
}
      76:	4015      	ands	r5, r2
			event.triggerEvent(0, timer);
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x72>
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xb0>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
			timer->_ms--;
      80:	fa95 f4a5 	rbit	r4, r5
			break;
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	if(!(ch & 0x80)) {
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5c>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb4>)
	if (pin > sizeof(pin_to_channel)) return 0;
      98:	699d      	ldr	r5, [r3, #24]
}
      9a:	695a      	ldr	r2, [r3, #20]
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x98>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb8>)
      a2:	2601      	movs	r6, #1
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x82>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20000770 	.word	0x20000770
      c8:	42004000 	.word	0x42004000
      cc:	200007f0 	.word	0x200007f0
      d0:	42008000 	.word	0x42008000
      d4:	20000870 	.word	0x20000870
      d8:	4200c000 	.word	0x4200c000
      dc:	200008f0 	.word	0x200008f0

000000e0 <register_tm_clones>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
		}
	}
	else
	for (mask=0x01; mask; mask <<= 1) {
      e4:	1a1b      	subs	r3, r3, r0
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
      e6:	0fd9      	lsrs	r1, r3, #31
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p = digital_pin_to_info_PGM + pin;
      ec:	1049      	asrs	r1, r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
      f4:	4718      	bx	r3
			*(p->reg + 0x21) = mask; // set register
      f6:	4770      	bx	lr
      f8:	20000ec0 	.word	0x20000ec0
	mask = p->mask;
      fc:	20000ec0 	.word	0x20000ec0
	if (pinmode & mask) {
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
			*(p->reg + 0x22) = mask; // clear register
     104:	b508      	push	{r3, lr}
	for (mask=0x01; mask; mask <<= 1) {
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
	if (pin >= CORE_NUM_DIGITAL) return;
     10e:	f3af 8000 	nop.w
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
     11a:	bf00      	nop
     11c:	00000000 	.word	0x00000000
     120:	200010c8 	.word	0x200010c8
	pinmode = *(p->reg + 1);
     124:	60006000 	.word	0x60006000

00000128 <handleInterrupt()>:

volatile bool triggerFunction = false;  // Flag to indicate interrupt occurred

// ISR for when signal is received
void handleInterrupt() {
  triggerFunction = true;
     128:	4b01      	ldr	r3, [pc, #4]	; (130 <handleInterrupt()+0x8>)
     12a:	2201      	movs	r2, #1
     12c:	701a      	strb	r2, [r3, #0]
}
     12e:	4770      	bx	lr
     130:	20001162 	.word	0x20001162

00000134 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
     134:	b430      	push	{r4, r5}
     136:	b082      	sub	sp, #8
     138:	460c      	mov	r4, r1
     13a:	ab02      	add	r3, sp, #8
     13c:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
     140:	7cc3      	ldrb	r3, [r0, #19]
     142:	2b00      	cmp	r3, #0
     144:	d030      	beq.n	1a8 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
     146:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     148:	7cc3      	ldrb	r3, [r0, #19]
     14a:	07da      	lsls	r2, r3, #31
     14c:	d508      	bpl.n	160 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     14e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     152:	6945      	ldr	r5, [r0, #20]
     154:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
     158:	402a      	ands	r2, r5
     15a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     15c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
     160:	079d      	lsls	r5, r3, #30
     162:	d508      	bpl.n	176 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     164:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     168:	6985      	ldr	r5, [r0, #24]
     16a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
     16e:	402a      	ands	r2, r5
     170:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     172:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
     176:	0759      	lsls	r1, r3, #29
     178:	d508      	bpl.n	18c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     17a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     17e:	69c5      	ldr	r5, [r0, #28]
     180:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
     184:	402a      	ands	r2, r5
     186:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     188:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
     18c:	071a      	lsls	r2, r3, #28
     18e:	d508      	bpl.n	1a2 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     190:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     194:	6a05      	ldr	r5, [r0, #32]
     196:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
     19a:	402a      	ands	r2, r5
     19c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     19e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
     1a2:	06db      	lsls	r3, r3, #27
     1a4:	d42f      	bmi.n	206 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     1a6:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     1a8:	6883      	ldr	r3, [r0, #8]
     1aa:	429c      	cmp	r4, r3
     1ac:	d035      	beq.n	21a <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     1ae:	4b22      	ldr	r3, [pc, #136]	; (238 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
     1b0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
     1b2:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     1b4:	4a21      	ldr	r2, [pc, #132]	; (23c <SPIClass::beginTransaction(SPISettings)+0x108>)
     1b6:	f3c3 1101 	ubfx	r1, r3, #4, #2
     1ba:	f3c3 6382 	ubfx	r3, r3, #26, #3
     1be:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
     1c2:	3301      	adds	r3, #1
     1c4:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     1c8:	b1cc      	cbz	r4, 1fe <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
     1ca:	4294      	cmp	r4, r2
     1cc:	d827      	bhi.n	21e <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
     1ce:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
     1d2:	fbb2 f2f3 	udiv	r2, r2, r3
     1d6:	4294      	cmp	r4, r2
     1d8:	d32c      	bcc.n	234 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
     1da:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     1de:	d320      	bcc.n	222 <SPIClass::beginTransaction(SPISettings)+0xee>
     1e0:	4c17      	ldr	r4, [pc, #92]	; (240 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     1e2:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     1e4:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     1e6:	2203      	movs	r2, #3
		port().CR = 0;
     1e8:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
     1ea:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
     1ec:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     1ee:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
     1f0:	2201      	movs	r2, #1
		port().CCR = _ccr;
     1f2:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     1f4:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     1f6:	611a      	str	r2, [r3, #16]
	}
     1f8:	b002      	add	sp, #8
     1fa:	bc30      	pop	{r4, r5}
     1fc:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
     1fe:	4299      	cmp	r1, r3
     200:	d3ef      	bcc.n	1e2 <SPIClass::beginTransaction(SPISettings)+0xae>
     202:	1c53      	adds	r3, r2, #1
     204:	e7e9      	b.n	1da <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     206:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     20a:	6a41      	ldr	r1, [r0, #36]	; 0x24
     20c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
     210:	400b      	ands	r3, r1
     212:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     214:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
     218:	e7c5      	b.n	1a6 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
     21a:	68c4      	ldr	r4, [r0, #12]
     21c:	e7e2      	b.n	1e4 <SPIClass::beginTransaction(SPISettings)+0xb0>
     21e:	2400      	movs	r4, #0
     220:	e7df      	b.n	1e2 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
     222:	2b02      	cmp	r3, #2
     224:	d9fb      	bls.n	21e <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
     226:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     228:	085a      	lsrs	r2, r3, #1
     22a:	0214      	lsls	r4, r2, #8
     22c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     230:	431c      	orrs	r4, r3
     232:	e7d6      	b.n	1e2 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
     234:	461a      	mov	r2, r3
     236:	e7e4      	b.n	202 <SPIClass::beginTransaction(SPISettings)+0xce>
     238:	400fc000 	.word	0x400fc000
     23c:	20000338 	.word	0x20000338
     240:	007f7fff 	.word	0x007f7fff

00000244 <setup>:

// the setup function runs once when you press reset or power the board
void setup() {
     244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  // Raspberry Pi Communication Pins
  pinMode(chChangePin, INPUT);
     248:	2100      	movs	r1, #0
     24a:	2012      	movs	r0, #18
     24c:	f000 fc34 	bl	ab8 <pinMode>
  pinMode(chChangeAckPin, OUTPUT);
     250:	2101      	movs	r1, #1
     252:	2013      	movs	r0, #19
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     254:	4d1b      	ldr	r5, [pc, #108]	; (2c4 <setup+0x80>)
     256:	f000 fc2f 	bl	ab8 <pinMode>
  pinMode(cycleAckPin, OUTPUT);
     25a:	2101      	movs	r1, #1
     25c:	2014      	movs	r0, #20
     25e:	4c1a      	ldr	r4, [pc, #104]	; (2c8 <setup+0x84>)
     260:	f000 fc2a 	bl	ab8 <pinMode>

  // set slave select pins as outputs
  pinMode(selectPin1, OUTPUT);
     264:	2101      	movs	r1, #1
     266:	2009      	movs	r0, #9
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     268:	4f18      	ldr	r7, [pc, #96]	; (2cc <setup+0x88>)
     26a:	f000 fc25 	bl	ab8 <pinMode>

  // initiate MUX channel switch when receiving pulse from RPi
  attachInterrupt(digitalPinToInterrupt(chChangePin), handleInterrupt, RISING);
     26e:	2203      	movs	r2, #3
     270:	4917      	ldr	r1, [pc, #92]	; (2d0 <setup+0x8c>)
     272:	2012      	movs	r0, #18
     274:	f000 fc5a 	bl	b2c <attachInterrupt>

  // initialize SPI and Serial communication
  SPI.begin();
     278:	4816      	ldr	r0, [pc, #88]	; (2d4 <setup+0x90>)
     27a:	f000 f9b1 	bl	5e0 <SPIClass::begin()>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     27e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2d8 <setup+0x94>
		uint32_t millis_begin = systick_millis_count;
     282:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
     284:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
     288:	f001 fefe 	bl	2088 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     28c:	7823      	ldrb	r3, [r4, #0]
     28e:	b153      	cbz	r3, 2a6 <setup+0x62>
     290:	783b      	ldrb	r3, [r7, #0]
     292:	07db      	lsls	r3, r3, #31
     294:	d507      	bpl.n	2a6 <setup+0x62>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     296:	682b      	ldr	r3, [r5, #0]
     298:	f8d9 2000 	ldr.w	r2, [r9]
     29c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     29e:	2b0e      	cmp	r3, #14
     2a0:	d901      	bls.n	2a6 <setup+0x62>
  Serial.begin(38400);

}
     2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     2a6:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     2a8:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     2aa:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     2ac:	b12a      	cbz	r2, 2ba <setup+0x76>
				if (elapsed > 2000) break;
     2ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     2b2:	d8f6      	bhi.n	2a2 <setup+0x5e>
			yield();
     2b4:	f001 fee8 	bl	2088 <yield>
     2b8:	e7e6      	b.n	288 <setup+0x44>
				if (elapsed > 750) break;
     2ba:	4543      	cmp	r3, r8
     2bc:	d9fa      	bls.n	2b4 <setup+0x70>
     2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     2c2:	bf00      	nop
     2c4:	20001138 	.word	0x20001138
     2c8:	20001166 	.word	0x20001166
     2cc:	20001165 	.word	0x20001165
     2d0:	00000129 	.word	0x00000129
     2d4:	200006fc 	.word	0x200006fc
     2d8:	20001148 	.word	0x20001148

000002dc <chnlChangeAck()>:
    }
  }

}

void chnlChangeAck() {
     2dc:	b510      	push	{r4, lr}
  // Acknowledgement signal that MUX channel has been changed
  // A 10s 3.3 V pulse -> RPi to detect rising edge
  digitalWrite(chChangeAckPin, HIGH);
     2de:	2101      	movs	r1, #1
     2e0:	2013      	movs	r0, #19
     2e2:	f000 fbbf 	bl	a64 <digitalWrite>
  delay(10);
     2e6:	200a      	movs	r0, #10
     2e8:	f000 fb68 	bl	9bc <delay>
  digitalWrite(chChangeAckPin, LOW);
     2ec:	2100      	movs	r1, #0
     2ee:	2013      	movs	r0, #19
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     2f0:	4c09      	ldr	r4, [pc, #36]	; (318 <chnlChangeAck()+0x3c>)
     2f2:	f000 fbb7 	bl	a64 <digitalWrite>
  Serial.println(chnlIndex);
     2f6:	4b09      	ldr	r3, [pc, #36]	; (31c <chnlChangeAck()+0x40>)
     2f8:	4620      	mov	r0, r4
     2fa:	6819      	ldr	r1, [r3, #0]
     2fc:	f000 fb44 	bl	988 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     300:	4620      	mov	r0, r4
     302:	f000 fb4d 	bl	9a0 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     306:	2110      	movs	r1, #16
     308:	4805      	ldr	r0, [pc, #20]	; (320 <chnlChangeAck()+0x44>)
     30a:	f001 fe3f 	bl	1f8c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     30e:	4620      	mov	r0, r4
  Serial.println("Channel Changed!");
}
     310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     314:	f000 bb44 	b.w	9a0 <Print::println()>
     318:	2000074c 	.word	0x2000074c
     31c:	200010b4 	.word	0x200010b4
     320:	20000294 	.word	0x20000294

00000324 <cycleCompleteAck()>:

void cycleCompleteAck() {
     324:	b508      	push	{r3, lr}
  // Acknowledgement signal that MUX has cycled through all available chnls
  // A 10s 3.3 V pulse -> RPi to detect rising edge
  digitalWrite(cycleAckPin, HIGH);
     326:	2101      	movs	r1, #1
     328:	2014      	movs	r0, #20
     32a:	f000 fb9b 	bl	a64 <digitalWrite>
  delay(10);
     32e:	200a      	movs	r0, #10
     330:	f000 fb44 	bl	9bc <delay>
  digitalWrite(cycleAckPin, LOW);
     334:	2100      	movs	r1, #0
     336:	2014      	movs	r0, #20
     338:	f000 fb94 	bl	a64 <digitalWrite>
     33c:	210f      	movs	r1, #15
     33e:	4804      	ldr	r0, [pc, #16]	; (350 <cycleCompleteAck()+0x2c>)
     340:	f001 fe24 	bl	1f8c <usb_serial_write>
     344:	4803      	ldr	r0, [pc, #12]	; (354 <cycleCompleteAck()+0x30>)
  Serial.println("Cycle Complete!");
}
     346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     34a:	f000 bb29 	b.w	9a0 <Print::println()>
     34e:	bf00      	nop
     350:	200002a8 	.word	0x200002a8
     354:	2000074c 	.word	0x2000074c

00000358 <loop>:
void loop() {
     358:	b570      	push	{r4, r5, r6, lr}
  SPI.beginTransaction(spiconfig);
     35a:	4c55      	ldr	r4, [pc, #340]	; (4b0 <loop+0x158>)
     35c:	4d55      	ldr	r5, [pc, #340]	; (4b4 <loop+0x15c>)
     35e:	4620      	mov	r0, r4
     360:	e895 0006 	ldmia.w	r5, {r1, r2}
     364:	f7ff fee6 	bl	134 <SPIClass::beginTransaction(SPISettings)>
  digitalWrite(selectPin1, LOW);
     368:	2100      	movs	r1, #0
     36a:	2009      	movs	r0, #9
     36c:	f000 fb7a 	bl	a64 <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     370:	6822      	ldr	r2, [r4, #0]
		port().TDR = data;
     372:	2340      	movs	r3, #64	; 0x40
     374:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     376:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     378:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
     37c:	d0fb      	beq.n	376 <loop+0x1e>
  digitalWrite(selectPin1, HIGH);
     37e:	2101      	movs	r1, #1
     380:	2009      	movs	r0, #9
     382:	6f53      	ldr	r3, [r2, #116]	; 0x74
     384:	f000 fb6e 	bl	a64 <digitalWrite>
		if (interruptMasksUsed) {
     388:	7ce3      	ldrb	r3, [r4, #19]
     38a:	b1eb      	cbz	r3, 3c8 <loop+0x70>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     38c:	07de      	lsls	r6, r3, #31
     38e:	d504      	bpl.n	39a <loop+0x42>
     390:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     392:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     396:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     39a:	0798      	lsls	r0, r3, #30
     39c:	d504      	bpl.n	3a8 <loop+0x50>
     39e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     3a0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     3a4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     3a8:	0759      	lsls	r1, r3, #29
     3aa:	d504      	bpl.n	3b6 <loop+0x5e>
     3ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
     3ae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     3b2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     3b6:	071a      	lsls	r2, r3, #28
     3b8:	d504      	bpl.n	3c4 <loop+0x6c>
     3ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
     3bc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     3c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     3c4:	06de      	lsls	r6, r3, #27
     3c6:	d403      	bmi.n	3d0 <loop+0x78>
  if (triggerFunction) {
     3c8:	4b3b      	ldr	r3, [pc, #236]	; (4b8 <loop+0x160>)
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	b94b      	cbnz	r3, 3e2 <loop+0x8a>
}
     3ce:	bd70      	pop	{r4, r5, r6, pc}
     3d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     3d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     3d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  if (triggerFunction) {
     3da:	4b37      	ldr	r3, [pc, #220]	; (4b8 <loop+0x160>)
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	2b00      	cmp	r3, #0
     3e0:	d0f5      	beq.n	3ce <loop+0x76>
     3e2:	2122      	movs	r1, #34	; 0x22
    chnlIndex = (chnlIndex + 1) % totalChnls;  // Cycle through channels
     3e4:	4e35      	ldr	r6, [pc, #212]	; (4bc <loop+0x164>)
     3e6:	4836      	ldr	r0, [pc, #216]	; (4c0 <loop+0x168>)
     3e8:	f001 fdd0 	bl	1f8c <usb_serial_write>
     3ec:	4835      	ldr	r0, [pc, #212]	; (4c4 <loop+0x16c>)
     3ee:	f000 fad7 	bl	9a0 <Print::println()>
     3f2:	6833      	ldr	r3, [r6, #0]
    SPI.beginTransaction(spiconfig);
     3f4:	482e      	ldr	r0, [pc, #184]	; (4b0 <loop+0x158>)
    chnlIndex = (chnlIndex + 1) % totalChnls;  // Cycle through channels
     3f6:	3301      	adds	r3, #1
     3f8:	425a      	negs	r2, r3
     3fa:	f003 0307 	and.w	r3, r3, #7
     3fe:	f002 0207 	and.w	r2, r2, #7
     402:	bf58      	it	pl
     404:	4253      	negpl	r3, r2
    SPI.beginTransaction(spiconfig);
     406:	e895 0006 	ldmia.w	r5, {r1, r2}
    chnlIndex = (chnlIndex + 1) % totalChnls;  // Cycle through channels
     40a:	6033      	str	r3, [r6, #0]
    SPI.beginTransaction(spiconfig);
     40c:	f7ff fe92 	bl	134 <SPIClass::beginTransaction(SPISettings)>
    digitalWrite(selectPin1, LOW);
     410:	2100      	movs	r1, #0
     412:	2009      	movs	r0, #9
     414:	f000 fb26 	bl	a64 <digitalWrite>
    SPI.transfer(chnls[chnlIndex]);  // send new chnl selection
     418:	492b      	ldr	r1, [pc, #172]	; (4c8 <loop+0x170>)
     41a:	6833      	ldr	r3, [r6, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     41c:	6822      	ldr	r2, [r4, #0]
		port().TDR = data;
     41e:	5ccb      	ldrb	r3, [r1, r3]
     420:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     422:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     424:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
     428:	d0fb      	beq.n	422 <loop+0xca>
    digitalWrite(selectPin1, HIGH);
     42a:	2101      	movs	r1, #1
     42c:	2009      	movs	r0, #9
     42e:	6f53      	ldr	r3, [r2, #116]	; 0x74
     430:	f000 fb18 	bl	a64 <digitalWrite>
		if (interruptMasksUsed) {
     434:	7ce3      	ldrb	r3, [r4, #19]
     436:	b313      	cbz	r3, 47e <loop+0x126>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     438:	07dd      	lsls	r5, r3, #31
     43a:	d504      	bpl.n	446 <loop+0xee>
     43c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     43e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     442:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     446:	0798      	lsls	r0, r3, #30
     448:	d504      	bpl.n	454 <loop+0xfc>
     44a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     44c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     450:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     454:	0759      	lsls	r1, r3, #29
     456:	d504      	bpl.n	462 <loop+0x10a>
     458:	6b21      	ldr	r1, [r4, #48]	; 0x30
     45a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     45e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     462:	071a      	lsls	r2, r3, #28
     464:	d504      	bpl.n	470 <loop+0x118>
     466:	6b61      	ldr	r1, [r4, #52]	; 0x34
     468:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     46c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     470:	06db      	lsls	r3, r3, #27
     472:	d504      	bpl.n	47e <loop+0x126>
     474:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     476:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     47a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    if (chnlIndex == totalChnls - 1){
     47e:	6833      	ldr	r3, [r6, #0]
     480:	2b07      	cmp	r3, #7
     482:	d00a      	beq.n	49a <loop+0x142>
     484:	213f      	movs	r1, #63	; 0x3f
     486:	4811      	ldr	r0, [pc, #68]	; (4cc <loop+0x174>)
     488:	f001 fd80 	bl	1f8c <usb_serial_write>
     48c:	480d      	ldr	r0, [pc, #52]	; (4c4 <loop+0x16c>)
     48e:	f000 fa87 	bl	9a0 <Print::println()>
}
     492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chnlChangeAck();
     496:	f7ff bf21 	b.w	2dc <chnlChangeAck()>
     49a:	2143      	movs	r1, #67	; 0x43
     49c:	480c      	ldr	r0, [pc, #48]	; (4d0 <loop+0x178>)
     49e:	f001 fd75 	bl	1f8c <usb_serial_write>
     4a2:	4808      	ldr	r0, [pc, #32]	; (4c4 <loop+0x16c>)
     4a4:	f000 fa7c 	bl	9a0 <Print::println()>
}
     4a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      cycleCompleteAck();
     4ac:	f7ff bf3a 	b.w	324 <cycleCompleteAck()>
     4b0:	200006fc 	.word	0x200006fc
     4b4:	2000112c 	.word	0x2000112c
     4b8:	20001162 	.word	0x20001162
     4bc:	200010b4 	.word	0x200010b4
     4c0:	200005c8 	.word	0x200005c8
     4c4:	2000074c 	.word	0x2000074c
     4c8:	200002b8 	.word	0x200002b8
     4cc:	20000630 	.word	0x20000630
     4d0:	200005ec 	.word	0x200005ec

000004d4 <_GLOBAL__sub_I_spiconfig>:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
     4d4:	4b02      	ldr	r3, [pc, #8]	; (4e0 <_GLOBAL__sub_I_spiconfig+0xc>)
			if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
     4d6:	4903      	ldr	r1, [pc, #12]	; (4e4 <_GLOBAL__sub_I_spiconfig+0x10>)
     4d8:	4a03      	ldr	r2, [pc, #12]	; (4e8 <_GLOBAL__sub_I_spiconfig+0x14>)
     4da:	e9c3 1200 	strd	r1, r2, [r3]
}
     4de:	4770      	bx	lr
     4e0:	2000112c 	.word	0x2000112c
     4e4:	01c9c380 	.word	0x01c9c380
     4e8:	80000007 	.word	0x80000007

000004ec <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     4ec:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
     4f0:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
     4f2:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
     4f6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     4f8:	d101      	bne.n	4fe <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
     4fa:	6883      	ldr	r3, [r0, #8]
     4fc:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
     4fe:	f000 b989 	b.w	814 <EventResponder::triggerEventNotImmediate()>
     502:	bf00      	nop

00000504 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
     504:	4b32      	ldr	r3, [pc, #200]	; (5d0 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     506:	4933      	ldr	r1, [pc, #204]	; (5d4 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     508:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
     50a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
     50e:	7920      	ldrb	r0, [r4, #4]
     510:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
     512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
     514:	f895 c004 	ldrb.w	ip, [r5, #4]
     518:	f881 c01c 	strb.w	ip, [r1, #28]
     51c:	7708      	strb	r0, [r1, #28]
     51e:	b152      	cbz	r2, 536 <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
     520:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
     524:	d323      	bcc.n	56e <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
     526:	492c      	ldr	r1, [pc, #176]	; (5d8 <_spi_dma_rxISR0()+0xd4>)
     528:	4411      	add	r1, r2
		DMA_SERQ = channel;
     52a:	4a2a      	ldr	r2, [pc, #168]	; (5d4 <_spi_dma_rxISR0()+0xd0>)
     52c:	6419      	str	r1, [r3, #64]	; 0x40
     52e:	76d0      	strb	r0, [r2, #27]
     530:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     534:	bd30      	pop	{r4, r5, pc}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     536:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     538:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     53a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     53c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     53e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
     542:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     544:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
     546:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
     54a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     54c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
     54e:	6804      	ldr	r4, [r0, #0]
     550:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     552:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
     556:	4b21      	ldr	r3, [pc, #132]	; (5dc <_spi_dma_rxISR0()+0xd8>)
     558:	429c      	cmp	r4, r3
     55a:	d126      	bne.n	5aa <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
     55c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
     55e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
     560:	2b02      	cmp	r3, #2
		_data = data;
     562:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     564:	d126      	bne.n	5b4 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
     566:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     56c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
     56e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     570:	8be9      	ldrh	r1, [r5, #30]
     572:	0409      	lsls	r1, r1, #16
     574:	d422      	bmi.n	5bc <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
     576:	b292      	uxth	r2, r2
     578:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
     57a:	6821      	ldr	r1, [r4, #0]
     57c:	8bec      	ldrh	r4, [r5, #30]
     57e:	b2a4      	uxth	r4, r4
     580:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     582:	8bcc      	ldrh	r4, [r1, #30]
     584:	0424      	lsls	r4, r4, #16
     586:	d505      	bpl.n	594 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     588:	8bcc      	ldrh	r4, [r1, #30]
     58a:	f3c2 0208 	ubfx	r2, r2, #0, #9
     58e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
     592:	4322      	orrs	r2, r4
     594:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
     596:	8bca      	ldrh	r2, [r1, #30]
     598:	b292      	uxth	r2, r2
     59a:	82ca      	strh	r2, [r1, #22]
     59c:	2100      	movs	r1, #0
     59e:	4a0d      	ldr	r2, [pc, #52]	; (5d4 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
     5a0:	6419      	str	r1, [r3, #64]	; 0x40
     5a2:	76d0      	strb	r0, [r2, #27]
     5a4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     5a8:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
     5aa:	4623      	mov	r3, r4
     5ac:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     5ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
     5b2:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
     5b8:	f000 b92c 	b.w	814 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     5bc:	8be9      	ldrh	r1, [r5, #30]
     5be:	f3c2 0e08 	ubfx	lr, r2, #0, #9
     5c2:	b292      	uxth	r2, r2
     5c4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
     5c8:	ea41 010e 	orr.w	r1, r1, lr
     5cc:	83e9      	strh	r1, [r5, #30]
     5ce:	e7d4      	b.n	57a <_spi_dma_rxISR0()+0x76>
     5d0:	200006fc 	.word	0x200006fc
     5d4:	400e8000 	.word	0x400e8000
     5d8:	ffff8001 	.word	0xffff8001
     5dc:	000004ed 	.word	0x000004ed

000005e0 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
     5e0:	6843      	ldr	r3, [r0, #4]
{
     5e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     5e6:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     5ea:	4d81      	ldr	r5, [pc, #516]	; (7f0 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     5ec:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     5f0:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
     5f2:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     5f6:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     5fa:	497e      	ldr	r1, [pc, #504]	; (7f4 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     5fc:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     5fe:	69aa      	ldr	r2, [r5, #24]
     600:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
     602:	4a7d      	ldr	r2, [pc, #500]	; (7f8 <SPIClass::begin()+0x218>)
     604:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     606:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     608:	f890 e010 	ldrb.w	lr, [r0, #16]
     60c:	4a7b      	ldr	r2, [pc, #492]	; (7fc <SPIClass::begin()+0x21c>)
     60e:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
     612:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     616:	7c31      	ldrb	r1, [r6, #16]
     618:	eb02 1101 	add.w	r1, r2, r1, lsl #4
     61c:	6889      	ldr	r1, [r1, #8]
     61e:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
     622:	f890 c011 	ldrb.w	ip, [r0, #17]
     626:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
     62a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
     62e:	f895 1020 	ldrb.w	r1, [r5, #32]
     632:	eb02 1101 	add.w	r1, r2, r1, lsl #4
     636:	6889      	ldr	r1, [r1, #8]
     638:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
     63c:	7c81      	ldrb	r1, [r0, #18]
     63e:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
     642:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
     646:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
     64a:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
     64e:	f8db b008 	ldr.w	fp, [fp, #8]
     652:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
     656:	f8d4 a000 	ldr.w	sl, [r4]
     65a:	685f      	ldr	r7, [r3, #4]
     65c:	ea4a 0a07 	orr.w	sl, sl, r7
     660:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
     664:	7c34      	ldrb	r4, [r6, #16]
     666:	f8de e014 	ldr.w	lr, [lr, #20]
     66a:	eb02 1404 	add.w	r4, r2, r4, lsl #4
     66e:	6864      	ldr	r4, [r4, #4]
     670:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
     674:	f895 4020 	ldrb.w	r4, [r5, #32]
     678:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
     67c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
     680:	6864      	ldr	r4, [r4, #4]
     682:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
     686:	6b49      	ldr	r1, [r1, #52]	; 0x34
     688:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
     68c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
     690:	6852      	ldr	r2, [r2, #4]
     692:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
     694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
     696:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
     69a:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
     69c:	69da      	ldr	r2, [r3, #28]
     69e:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
     6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
     6a2:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
     6a4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
     6a8:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
     6aa:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     6ac:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
     6ae:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
     6b2:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
     6b4:	7cc2      	ldrb	r2, [r0, #19]
     6b6:	2a00      	cmp	r2, #0
     6b8:	d031      	beq.n	71e <SPIClass::begin()+0x13e>
			__disable_irq();
     6ba:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     6bc:	7cc3      	ldrb	r3, [r0, #19]
     6be:	07dc      	lsls	r4, r3, #31
     6c0:	d508      	bpl.n	6d4 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     6c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     6c6:	6944      	ldr	r4, [r0, #20]
     6c8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
     6cc:	4022      	ands	r2, r4
     6ce:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     6d0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
     6d4:	0799      	lsls	r1, r3, #30
     6d6:	d508      	bpl.n	6ea <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     6d8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     6dc:	6984      	ldr	r4, [r0, #24]
     6de:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
     6e2:	4022      	ands	r2, r4
     6e4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     6e6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
     6ea:	075a      	lsls	r2, r3, #29
     6ec:	d508      	bpl.n	700 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     6ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     6f2:	69c4      	ldr	r4, [r0, #28]
     6f4:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
     6f8:	4022      	ands	r2, r4
     6fa:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     6fc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
     700:	071f      	lsls	r7, r3, #28
     702:	d508      	bpl.n	716 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     704:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     708:	6a04      	ldr	r4, [r0, #32]
     70a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
     70e:	4022      	ands	r2, r4
     710:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     712:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
     716:	06de      	lsls	r6, r3, #27
     718:	d455      	bmi.n	7c6 <SPIClass::begin()+0x1e6>
			__enable_irq();
     71a:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     71c:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
     71e:	4c38      	ldr	r4, [pc, #224]	; (800 <SPIClass::begin()+0x220>)
     720:	6882      	ldr	r2, [r0, #8]
     722:	42a2      	cmp	r2, r4
     724:	d059      	beq.n	7da <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
     726:	4a32      	ldr	r2, [pc, #200]	; (7f0 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
     728:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
     72a:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     72c:	4935      	ldr	r1, [pc, #212]	; (804 <SPIClass::begin()+0x224>)
     72e:	f3c2 1601 	ubfx	r6, r2, #4, #2
     732:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
     736:	4d34      	ldr	r5, [pc, #208]	; (808 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     738:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
     73c:	3201      	adds	r2, #1
     73e:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
     742:	42aa      	cmp	r2, r5
     744:	d831      	bhi.n	7aa <SPIClass::begin()+0x1ca>
     746:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     748:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
     74a:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     74c:	2103      	movs	r1, #3
		port().CR = 0;
     74e:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
     750:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     752:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
     754:	2101      	movs	r1, #1
		port().CCR = _ccr;
     756:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     758:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     75a:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
     75c:	7cc3      	ldrb	r3, [r0, #19]
     75e:	b313      	cbz	r3, 7a6 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     760:	07dd      	lsls	r5, r3, #31
     762:	d504      	bpl.n	76e <SPIClass::begin()+0x18e>
     764:	6a81      	ldr	r1, [r0, #40]	; 0x28
     766:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     76a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     76e:	079c      	lsls	r4, r3, #30
     770:	d504      	bpl.n	77c <SPIClass::begin()+0x19c>
     772:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     774:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     778:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     77c:	0759      	lsls	r1, r3, #29
     77e:	d504      	bpl.n	78a <SPIClass::begin()+0x1aa>
     780:	6b01      	ldr	r1, [r0, #48]	; 0x30
     782:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     786:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     78a:	071a      	lsls	r2, r3, #28
     78c:	d504      	bpl.n	798 <SPIClass::begin()+0x1b8>
     78e:	6b41      	ldr	r1, [r0, #52]	; 0x34
     790:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     794:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     798:	06db      	lsls	r3, r3, #27
     79a:	d504      	bpl.n	7a6 <SPIClass::begin()+0x1c6>
     79c:	6b82      	ldr	r2, [r0, #56]	; 0x38
     79e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     7a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
     7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
     7aa:	4918      	ldr	r1, [pc, #96]	; (80c <SPIClass::begin()+0x22c>)
     7ac:	fba1 5102 	umull	r5, r1, r1, r2
     7b0:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
     7b2:	fbb2 f2f1 	udiv	r2, r2, r1
     7b6:	42a2      	cmp	r2, r4
     7b8:	bf88      	it	hi
     7ba:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
     7bc:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     7c0:	d30d      	bcc.n	7de <SPIClass::begin()+0x1fe>
     7c2:	4a13      	ldr	r2, [pc, #76]	; (810 <SPIClass::begin()+0x230>)
				div = d-2;
     7c4:	e7c0      	b.n	748 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     7c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     7ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
     7cc:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
     7d0:	400b      	ands	r3, r1
     7d2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     7d4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
     7d8:	e79f      	b.n	71a <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
     7da:	68c2      	ldr	r2, [r0, #12]
     7dc:	e7b5      	b.n	74a <SPIClass::begin()+0x16a>
			if (d > 2) {
     7de:	2902      	cmp	r1, #2
     7e0:	d9b1      	bls.n	746 <SPIClass::begin()+0x166>
				div = d-2;
     7e2:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     7e4:	084c      	lsrs	r4, r1, #1
     7e6:	0222      	lsls	r2, r4, #8
     7e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     7ec:	430a      	orrs	r2, r1
     7ee:	e7ab      	b.n	748 <SPIClass::begin()+0x168>
     7f0:	400fc000 	.word	0x400fc000
     7f4:	e3ffffcf 	.word	0xe3ffffcf
     7f8:	08000010 	.word	0x08000010
     7fc:	20000348 	.word	0x20000348
     800:	003d0900 	.word	0x003d0900
     804:	20000338 	.word	0x20000338
     808:	003d08ff 	.word	0x003d08ff
     80c:	431bde83 	.word	0x431bde83
     810:	007f7fff 	.word	0x007f7fff

00000814 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     814:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
     818:	b672      	cpsid	i
	if (_triggered == false) {
     81a:	7f43      	ldrb	r3, [r0, #29]
     81c:	b95b      	cbnz	r3, 836 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
     81e:	7f01      	ldrb	r1, [r0, #28]
     820:	2901      	cmp	r1, #1
{
     822:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
     824:	d00b      	beq.n	83e <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
     826:	2903      	cmp	r1, #3
     828:	d013      	beq.n	852 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
     82a:	2301      	movs	r3, #1
     82c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     82e:	b902      	cbnz	r2, 832 <EventResponder::triggerEventNotImmediate()+0x1e>
     830:	b662      	cpsie	i
}
     832:	bc30      	pop	{r4, r5}
     834:	4770      	bx	lr
     836:	b90a      	cbnz	r2, 83c <EventResponder::triggerEventNotImmediate()+0x28>
     838:	b662      	cpsie	i
     83a:	4770      	bx	lr
     83c:	4770      	bx	lr
			if (firstYield == nullptr) {
     83e:	4c12      	ldr	r4, [pc, #72]	; (888 <EventResponder::triggerEventNotImmediate()+0x74>)
     840:	6821      	ldr	r1, [r4, #0]
     842:	b1b1      	cbz	r1, 872 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
     844:	4911      	ldr	r1, [pc, #68]	; (88c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
     846:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
     848:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
     84a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
     84c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
     84e:	6158      	str	r0, [r3, #20]
				lastYield = this;
     850:	e7eb      	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
     852:	4d0f      	ldr	r5, [pc, #60]	; (890 <EventResponder::triggerEventNotImmediate()+0x7c>)
     854:	490f      	ldr	r1, [pc, #60]	; (894 <EventResponder::triggerEventNotImmediate()+0x80>)
     856:	682c      	ldr	r4, [r5, #0]
     858:	b18c      	cbz	r4, 87e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
     85a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
     85c:	680b      	ldr	r3, [r1, #0]
     85e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
     860:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     862:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     866:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
     86a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     86c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
     870:	e7db      	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
     872:	4b06      	ldr	r3, [pc, #24]	; (88c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
     874:	6020      	str	r0, [r4, #0]
				lastYield = this;
     876:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
     878:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
     87c:	e7d5      	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
     87e:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
     882:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
     884:	e7ed      	b.n	862 <EventResponder::triggerEventNotImmediate()+0x4e>
     886:	bf00      	nop
     888:	20001088 	.word	0x20001088
     88c:	20001094 	.word	0x20001094
     890:	20001090 	.word	0x20001090
     894:	2000108c 	.word	0x2000108c

00000898 <EventResponder::runFromInterrupt()>:
{
     898:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     89a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
     89e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
     8a0:	4c0c      	ldr	r4, [pc, #48]	; (8d4 <EventResponder::runFromInterrupt()+0x3c>)
     8a2:	6820      	ldr	r0, [r4, #0]
		if (first) {
     8a4:	b180      	cbz	r0, 8c8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
     8a6:	4e0c      	ldr	r6, [pc, #48]	; (8d8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
     8a8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
     8aa:	6943      	ldr	r3, [r0, #20]
     8ac:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
     8ae:	b173      	cbz	r3, 8ce <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
     8b0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
     8b2:	b902      	cbnz	r2, 8b6 <EventResponder::runFromInterrupt()+0x1e>
     8b4:	b662      	cpsie	i
			(*(first->_function))(*first);
     8b6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
     8b8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
     8ba:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     8bc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
     8c0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
     8c2:	6820      	ldr	r0, [r4, #0]
		if (first) {
     8c4:	2800      	cmp	r0, #0
     8c6:	d1f0      	bne.n	8aa <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
     8c8:	b902      	cbnz	r2, 8cc <EventResponder::runFromInterrupt()+0x34>
     8ca:	b662      	cpsie	i
}
     8cc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
     8ce:	6033      	str	r3, [r6, #0]
     8d0:	e7ef      	b.n	8b2 <EventResponder::runFromInterrupt()+0x1a>
     8d2:	bf00      	nop
     8d4:	20001090 	.word	0x20001090
     8d8:	2000108c 	.word	0x2000108c

000008dc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
     8dc:	f7ff bfdc 	b.w	898 <EventResponder::runFromInterrupt()>

000008e0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     8e0:	4904      	ldr	r1, [pc, #16]	; (8f4 <systick_isr+0x14>)
	systick_millis_count++;
     8e2:	4a05      	ldr	r2, [pc, #20]	; (8f8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
     8e4:	6849      	ldr	r1, [r1, #4]
     8e6:	4b05      	ldr	r3, [pc, #20]	; (8fc <systick_isr+0x1c>)
     8e8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
     8ea:	6813      	ldr	r3, [r2, #0]
     8ec:	3301      	adds	r3, #1
     8ee:	6013      	str	r3, [r2, #0]
}
     8f0:	4770      	bx	lr
     8f2:	bf00      	nop
     8f4:	e0001000 	.word	0xe0001000
     8f8:	20001138 	.word	0x20001138
     8fc:	20001134 	.word	0x20001134

00000900 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     900:	4608      	mov	r0, r1
     902:	f001 bb2d 	b.w	1f60 <usb_serial_putchar>
     906:	bf00      	nop

00000908 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
     908:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     90a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
     90c:	bf08      	it	eq
     90e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     910:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
     912:	b391      	cbz	r1, 97a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
     914:	f04f 0e21 	mov.w	lr, #33	; 0x21
     918:	e001      	b.n	91e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
     91a:	fa5f fe86 	uxtb.w	lr, r6
     91e:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
     922:	fbb1 f5f2 	udiv	r5, r1, r2
     926:	fb02 1415 	mls	r4, r2, r5, r1
     92a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     92e:	2c09      	cmp	r4, #9
     930:	f10c 0437 	add.w	r4, ip, #55	; 0x37
     934:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
     938:	bf98      	it	ls
     93a:	fa5f f48c 	uxtbls.w	r4, ip
     93e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
     942:	bf88      	it	hi
     944:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
     946:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     948:	44ec      	add	ip, sp
			n /= base;
     94a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     94c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
     950:	d2e3      	bcs.n	91a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
     952:	b14b      	cbz	r3, 968 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
     954:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
     958:	222d      	movs	r2, #45	; 0x2d
		i--;
     95a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
     95e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
     962:	446b      	add	r3, sp
     964:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
     968:	6803      	ldr	r3, [r0, #0]
     96a:	a901      	add	r1, sp, #4
     96c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
     970:	685b      	ldr	r3, [r3, #4]
     972:	4471      	add	r1, lr
     974:	4798      	blx	r3
}
     976:	b00a      	add	sp, #40	; 0x28
     978:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
     97a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     97c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
     980:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
     984:	e7e5      	b.n	952 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
     986:	bf00      	nop

00000988 <Print::print(long)>:
	if (n < 0) {
     988:	2900      	cmp	r1, #0
     98a:	db03      	blt.n	994 <Print::print(long)+0xc>
	uint8_t sign=0;
     98c:	2300      	movs	r3, #0
	if (base == 0) {
     98e:	220a      	movs	r2, #10
     990:	f7ff bfba 	b.w	908 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
     994:	4249      	negs	r1, r1
		sign = '-';
     996:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
     998:	220a      	movs	r2, #10
     99a:	f7ff bfb5 	b.w	908 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     99e:	bf00      	nop

000009a0 <Print::println()>:
{
     9a0:	b500      	push	{lr}
	return write(buf, 2);
     9a2:	6803      	ldr	r3, [r0, #0]
{
     9a4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
     9a6:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
     9aa:	2202      	movs	r2, #2
     9ac:	a901      	add	r1, sp, #4
     9ae:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
     9b0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
     9b4:	4798      	blx	r3
}
     9b6:	b003      	add	sp, #12
     9b8:	f85d fb04 	ldr.w	pc, [sp], #4

000009bc <delay>:
	if (msec == 0) return;
     9bc:	b900      	cbnz	r0, 9c0 <delay+0x4>
     9be:	4770      	bx	lr
{
     9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     9c4:	2101      	movs	r1, #1
     9c6:	4681      	mov	r9, r0
     9c8:	4c21      	ldr	r4, [pc, #132]	; (a50 <delay+0x94>)
     9ca:	4d22      	ldr	r5, [pc, #136]	; (a54 <delay+0x98>)
     9cc:	4e22      	ldr	r6, [pc, #136]	; (a58 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     9ce:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     9d2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     9d4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     9d6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     9da:	2b00      	cmp	r3, #0
     9dc:	d1f7      	bne.n	9ce <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     9de:	491f      	ldr	r1, [pc, #124]	; (a5c <delay+0xa0>)
     9e0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
     9e2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     9e6:	f8df a078 	ldr.w	sl, [pc, #120]	; a60 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     9ea:	1a1b      	subs	r3, r3, r0
     9ec:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     9ee:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     9f2:	f8da 2000 	ldr.w	r2, [sl]
     9f6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     9fa:	455a      	cmp	r2, fp
     9fc:	bf94      	ite	ls
     9fe:	4490      	addls	r8, r2
     a00:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     a02:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     a06:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     a08:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     a0a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     a0e:	2b00      	cmp	r3, #0
     a10:	d1f7      	bne.n	a02 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     a12:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     a14:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     a18:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     a1a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     a1e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     a22:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     a26:	bf94      	ite	ls
     a28:	4462      	addls	r2, ip
     a2a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     a2e:	eba2 0208 	sub.w	r2, r2, r8
     a32:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     a36:	d306      	bcc.n	a46 <delay+0x8a>
			if (--msec == 0) return;
     a38:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     a3c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     a40:	d1df      	bne.n	a02 <delay+0x46>
}
     a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     a46:	f001 fb1f 	bl	2088 <yield>
		while ((micros() - start) >= 1000) {
     a4a:	4904      	ldr	r1, [pc, #16]	; (a5c <delay+0xa0>)
     a4c:	e7d9      	b.n	a02 <delay+0x46>
     a4e:	bf00      	nop
     a50:	2000113c 	.word	0x2000113c
     a54:	20001138 	.word	0x20001138
     a58:	20001134 	.word	0x20001134
     a5c:	e0001000 	.word	0xe0001000
     a60:	20001128 	.word	0x20001128

00000a64 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
     a64:	2827      	cmp	r0, #39	; 0x27
     a66:	d816      	bhi.n	a96 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     a68:	0102      	lsls	r2, r0, #4
     a6a:	4b10      	ldr	r3, [pc, #64]	; (aac <digitalWrite+0x48>)
     a6c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     a70:	589b      	ldr	r3, [r3, r2]
{
     a72:	b410      	push	{r4}
	mask = p->mask;
     a74:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     a76:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     a78:	4214      	tst	r4, r2
     a7a:	d005      	beq.n	a88 <digitalWrite+0x24>
		if (val) {
     a7c:	b961      	cbnz	r1, a98 <digitalWrite+0x34>
}
     a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     a86:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a88:	6883      	ldr	r3, [r0, #8]
		if (val) {
     a8a:	b151      	cbz	r1, aa2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a8c:	4a08      	ldr	r2, [pc, #32]	; (ab0 <digitalWrite+0x4c>)
}
     a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a92:	601a      	str	r2, [r3, #0]
}
     a94:	4770      	bx	lr
     a96:	4770      	bx	lr
     a98:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     aa0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     aa2:	4a04      	ldr	r2, [pc, #16]	; (ab4 <digitalWrite+0x50>)
}
     aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	4770      	bx	lr
     aac:	20000348 	.word	0x20000348
     ab0:	0001f038 	.word	0x0001f038
     ab4:	00013038 	.word	0x00013038

00000ab8 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
     ab8:	2827      	cmp	r0, #39	; 0x27
     aba:	d829      	bhi.n	b10 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     abc:	4b16      	ldr	r3, [pc, #88]	; (b18 <pinMode+0x60>)
     abe:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     ac0:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     ac2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     ac6:	589a      	ldr	r2, [r3, r2]
{
     ac8:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     aca:	6853      	ldr	r3, [r2, #4]
     acc:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     ace:	d00e      	beq.n	aee <pinMode+0x36>
     ad0:	2904      	cmp	r1, #4
     ad2:	d00c      	beq.n	aee <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     ad4:	ea23 0304 	bic.w	r3, r3, r4
     ad8:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     ada:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     adc:	b1a9      	cbz	r1, b0a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     ade:	2902      	cmp	r1, #2
     ae0:	d017      	beq.n	b12 <pinMode+0x5a>
		} else if (mode == INPUT_PULLDOWN) {
     ae2:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     ae4:	bf0c      	ite	eq
     ae6:	4a0d      	ldreq	r2, [pc, #52]	; (b1c <pinMode+0x64>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     ae8:	4a0d      	ldrne	r2, [pc, #52]	; (b20 <pinMode+0x68>)
     aea:	601a      	str	r2, [r3, #0]
     aec:	e007      	b.n	afe <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     aee:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     af0:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     af2:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     af4:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     af6:	d008      	beq.n	b0a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     af8:	f640 0238 	movw	r2, #2104	; 0x838
     afc:	601a      	str	r2, [r3, #0]
	*(p->mux) = 5 | 0x10;
     afe:	6843      	ldr	r3, [r0, #4]
     b00:	2215      	movs	r2, #21
}
     b02:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     b06:	601a      	str	r2, [r3, #0]
}
     b08:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     b0a:	2238      	movs	r2, #56	; 0x38
     b0c:	601a      	str	r2, [r3, #0]
     b0e:	e7f6      	b.n	afe <pinMode+0x46>
     b10:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     b12:	4a04      	ldr	r2, [pc, #16]	; (b24 <pinMode+0x6c>)
     b14:	601a      	str	r2, [r3, #0]
     b16:	e7f2      	b.n	afe <pinMode+0x46>
     b18:	20000348 	.word	0x20000348
     b1c:	00013038 	.word	0x00013038
     b20:	00010038 	.word	0x00010038
     b24:	0001f038 	.word	0x0001f038

00000b28 <dummy_isr>:
static void dummy_isr() {};
     b28:	4770      	bx	lr
     b2a:	bf00      	nop

00000b2c <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
     b2c:	2827      	cmp	r0, #39	; 0x27
     b2e:	d858      	bhi.n	be2 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
     b30:	0100      	lsls	r0, r0, #4
{
     b32:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
     b34:	4c34      	ldr	r4, [pc, #208]	; (c08 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
     b36:	4d35      	ldr	r5, [pc, #212]	; (c0c <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
     b38:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
     b3a:	42ab      	cmp	r3, r5
     b3c:	d056      	beq.n	bec <attachInterrupt+0xc0>
     b3e:	d849      	bhi.n	bd4 <attachInterrupt+0xa8>
     b40:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
     b44:	d04b      	beq.n	bde <attachInterrupt+0xb2>
     b46:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
     b4a:	42ab      	cmp	r3, r5
     b4c:	d140      	bne.n	bd0 <attachInterrupt+0xa4>
     b4e:	4d30      	ldr	r5, [pc, #192]	; (c10 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
     b50:	4420      	add	r0, r4
     b52:	4e30      	ldr	r6, [pc, #192]	; (c14 <attachInterrupt+0xe8>)
     b54:	4c30      	ldr	r4, [pc, #192]	; (c18 <attachInterrupt+0xec>)
     b56:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
     b5a:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
     b5e:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
     b60:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
     b64:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
     b68:	2a04      	cmp	r2, #4
     b6a:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
     b6e:	d82f      	bhi.n	bd0 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
     b70:	695e      	ldr	r6, [r3, #20]
     b72:	ea26 0600 	bic.w	r6, r6, r0
     b76:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
     b78:	f04f 0605 	mov.w	r6, #5
     b7c:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
     b80:	6826      	ldr	r6, [r4, #0]
     b82:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
     b86:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
     b88:	685c      	ldr	r4, [r3, #4]
     b8a:	ea24 0400 	bic.w	r4, r4, r0
     b8e:	605c      	str	r4, [r3, #4]
     b90:	4c22      	ldr	r4, [pc, #136]	; (c1c <attachInterrupt+0xf0>)
     b92:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
     b96:	fa90 f2a0 	rbit	r2, r0
     b9a:	fab2 f282 	clz	r2, r2
	table[index] = function;
     b9e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
     ba2:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
     ba6:	d01d      	beq.n	be4 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
     ba8:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
     baa:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
     bac:	ea01 0105 	and.w	r1, r1, r5
     bb0:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
     bb2:	dc1d      	bgt.n	bf0 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
     bb4:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
     bb6:	2503      	movs	r5, #3
     bb8:	68d9      	ldr	r1, [r3, #12]
     bba:	4094      	lsls	r4, r2
     bbc:	fa05 f202 	lsl.w	r2, r5, r2
     bc0:	ea21 0202 	bic.w	r2, r1, r2
     bc4:	4322      	orrs	r2, r4
     bc6:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
     bc8:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
     bca:	695a      	ldr	r2, [r3, #20]
     bcc:	4302      	orrs	r2, r0
     bce:	615a      	str	r2, [r3, #20]
}
     bd0:	bcf0      	pop	{r4, r5, r6, r7}
     bd2:	4770      	bx	lr
	switch((uint32_t)gpio) {
     bd4:	4d12      	ldr	r5, [pc, #72]	; (c20 <attachInterrupt+0xf4>)
     bd6:	42ab      	cmp	r3, r5
     bd8:	d1fa      	bne.n	bd0 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
     bda:	4d12      	ldr	r5, [pc, #72]	; (c24 <attachInterrupt+0xf8>)
     bdc:	e7b8      	b.n	b50 <attachInterrupt+0x24>
			table = isr_table_gpio1;
     bde:	4d12      	ldr	r5, [pc, #72]	; (c28 <attachInterrupt+0xfc>)
     be0:	e7b6      	b.n	b50 <attachInterrupt+0x24>
     be2:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
     be4:	69da      	ldr	r2, [r3, #28]
     be6:	4302      	orrs	r2, r0
     be8:	61da      	str	r2, [r3, #28]
     bea:	e7ed      	b.n	bc8 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
     bec:	4d0f      	ldr	r5, [pc, #60]	; (c2c <attachInterrupt+0x100>)
     bee:	e7af      	b.n	b50 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
     bf0:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
     bf2:	2503      	movs	r5, #3
     bf4:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
     bf6:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
     bf8:	4094      	lsls	r4, r2
     bfa:	fa05 f202 	lsl.w	r2, r5, r2
     bfe:	ea21 0202 	bic.w	r2, r1, r2
     c02:	4322      	orrs	r2, r4
     c04:	611a      	str	r2, [r3, #16]
     c06:	e7df      	b.n	bc8 <attachInterrupt+0x9c>
     c08:	20000348 	.word	0x20000348
     c0c:	42008000 	.word	0x42008000
     c10:	200007f0 	.word	0x200007f0
     c14:	00000021 	.word	0x00000021
     c18:	20000c00 	.word	0x20000c00
     c1c:	20000280 	.word	0x20000280
     c20:	4200c000 	.word	0x4200c000
     c24:	200008f0 	.word	0x200008f0
     c28:	20000770 	.word	0x20000770
     c2c:	20000870 	.word	0x20000870

00000c30 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     c30:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     c32:	f7ff fb07 	bl	244 <setup>
	while (1) {
		loop();
     c36:	f7ff fb8f 	bl	358 <loop>
		yield();
     c3a:	f001 fa25 	bl	2088 <yield>
	while (1) {
     c3e:	e7fa      	b.n	c36 <main+0x6>

00000c40 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
     c40:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
     c42:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
     c46:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     c4a:	d16d      	bne.n	d28 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     c4c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
     c4e:	d341      	bcc.n	cd4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     c50:	f851 3b04 	ldr.w	r3, [r1], #4
     c54:	f840 3b04 	str.w	r3, [r0], #4
     c58:	f851 3b04 	ldr.w	r3, [r1], #4
     c5c:	f840 3b04 	str.w	r3, [r0], #4
     c60:	f851 3b04 	ldr.w	r3, [r1], #4
     c64:	f840 3b04 	str.w	r3, [r0], #4
     c68:	f851 3b04 	ldr.w	r3, [r1], #4
     c6c:	f840 3b04 	str.w	r3, [r0], #4
     c70:	f851 3b04 	ldr.w	r3, [r1], #4
     c74:	f840 3b04 	str.w	r3, [r0], #4
     c78:	f851 3b04 	ldr.w	r3, [r1], #4
     c7c:	f840 3b04 	str.w	r3, [r0], #4
     c80:	f851 3b04 	ldr.w	r3, [r1], #4
     c84:	f840 3b04 	str.w	r3, [r0], #4
     c88:	f851 3b04 	ldr.w	r3, [r1], #4
     c8c:	f840 3b04 	str.w	r3, [r0], #4
     c90:	f851 3b04 	ldr.w	r3, [r1], #4
     c94:	f840 3b04 	str.w	r3, [r0], #4
     c98:	f851 3b04 	ldr.w	r3, [r1], #4
     c9c:	f840 3b04 	str.w	r3, [r0], #4
     ca0:	f851 3b04 	ldr.w	r3, [r1], #4
     ca4:	f840 3b04 	str.w	r3, [r0], #4
     ca8:	f851 3b04 	ldr.w	r3, [r1], #4
     cac:	f840 3b04 	str.w	r3, [r0], #4
     cb0:	f851 3b04 	ldr.w	r3, [r1], #4
     cb4:	f840 3b04 	str.w	r3, [r0], #4
     cb8:	f851 3b04 	ldr.w	r3, [r1], #4
     cbc:	f840 3b04 	str.w	r3, [r0], #4
     cc0:	f851 3b04 	ldr.w	r3, [r1], #4
     cc4:	f840 3b04 	str.w	r3, [r0], #4
     cc8:	f851 3b04 	ldr.w	r3, [r1], #4
     ccc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
     cd0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
     cd2:	d2bd      	bcs.n	c50 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
     cd4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
     cd6:	d311      	bcc.n	cfc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     cd8:	f851 3b04 	ldr.w	r3, [r1], #4
     cdc:	f840 3b04 	str.w	r3, [r0], #4
     ce0:	f851 3b04 	ldr.w	r3, [r1], #4
     ce4:	f840 3b04 	str.w	r3, [r0], #4
     ce8:	f851 3b04 	ldr.w	r3, [r1], #4
     cec:	f840 3b04 	str.w	r3, [r0], #4
     cf0:	f851 3b04 	ldr.w	r3, [r1], #4
     cf4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
     cf8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
     cfa:	d2ed      	bcs.n	cd8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
     cfc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
     cfe:	d305      	bcc.n	d0c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
     d00:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
     d04:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
     d08:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
     d0a:	d2f9      	bcs.n	d00 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
     d0c:	3204      	adds	r2, #4
	beq	.Ldone
     d0e:	d008      	beq.n	d22 <memcpy+0xe2>

	lsls	r2, r2, #31
     d10:	07d2      	lsls	r2, r2, #31
	itt ne
     d12:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     d18:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
     d1c:	d301      	bcc.n	d22 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
     d1e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
     d20:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     d22:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     d24:	4770      	bx	lr
     d26:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
     d28:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
     d2a:	d313      	bcc.n	d54 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
     d2c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
     d2e:	d08d      	beq.n	c4c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
     d30:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
     d34:	d08a      	beq.n	c4c <memcpy+0xc>

	rsb	r3, #4
     d36:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
     d3a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
     d3c:	07db      	lsls	r3, r3, #31
	itt ne
     d3e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     d44:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
     d48:	d380      	bcc.n	c4c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
     d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
     d4e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
     d52:	e77b      	b.n	c4c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
     d54:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
     d56:	d3d9      	bcc.n	d0c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
     d58:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
     d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     d5e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
     d62:	d2f9      	bcs.n	d58 <memcpy+0x118>

	ldrb	r3, [r1]
     d64:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
     d66:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
     d68:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
     d6a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
     d6c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
     d6e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     d70:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     d72:	4770      	bx	lr

00000d74 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
     d74:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
     d78:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
     d7a:	4666      	mov	r6, ip
	int i=0, j;
     d7c:	2400      	movs	r4, #0
     d7e:	e000      	b.n	d82 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
     d80:	3401      	adds	r4, #1
		digit = val % radix;
     d82:	fbb0 f5f2 	udiv	r5, r0, r2
     d86:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     d8a:	2b09      	cmp	r3, #9
     d8c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
     d90:	f103 0330 	add.w	r3, r3, #48	; 0x30
     d94:	fa5f fe8e 	uxtb.w	lr, lr
     d98:	bf98      	it	ls
     d9a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
     d9e:	4290      	cmp	r0, r2
		val /= radix;
     da0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     da2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
     da6:	d2eb      	bcs.n	d80 <ultoa+0xc>
	}
	buf[i + 1] = 0;
     da8:	1c63      	adds	r3, r4, #1
     daa:	2200      	movs	r2, #0
     dac:	18c8      	adds	r0, r1, r3
     dae:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
     db0:	b17c      	cbz	r4, dd2 <ultoa+0x5e>
		t = buf[j];
     db2:	4662      	mov	r2, ip
     db4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
     db8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
     dbc:	eba1 030c 	sub.w	r3, r1, ip
     dc0:	3202      	adds	r2, #2
		buf[j] = buf[i];
     dc2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
     dc6:	3b01      	subs	r3, #1
     dc8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
     dca:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
     dcc:	4423      	add	r3, r4
     dce:	429a      	cmp	r2, r3
     dd0:	dbef      	blt.n	db2 <ultoa+0x3e>
	}
	return buf;
}
     dd2:	4608      	mov	r0, r1
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	bf00      	nop

00000dd8 <unused_interrupt_vector>:
	__disable_irq();
     dd8:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     dda:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     dde:	4c52      	ldr	r4, [pc, #328]	; (f28 <unused_interrupt_vector+0x150>)
     de0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     de4:	f01e 0f04 	tst.w	lr, #4
     de8:	bf0c      	ite	eq
     dea:	f3ef 8208 	mrseq	r2, MSP
     dee:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     df2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     df6:	4e4d      	ldr	r6, [pc, #308]	; (f2c <unused_interrupt_vector+0x154>)
	while (p < end) {
     df8:	4d4d      	ldr	r5, [pc, #308]	; (f30 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     dfa:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     dfe:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     e02:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     e06:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     e0a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     e0e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     e12:	6993      	ldr	r3, [r2, #24]
     e14:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     e18:	69d3      	ldr	r3, [r2, #28]
     e1a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     e1e:	f000 f8a3 	bl	f68 <tempmonGetTemp>
     e22:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     e26:	f001 fbcb 	bl	25c0 <rtc_get>
	info->len = sizeof(*info) / 4;
     e2a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     e30:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     e34:	460b      	mov	r3, r1
     e36:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     e3a:	493e      	ldr	r1, [pc, #248]	; (f34 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     e3c:	1d30      	adds	r0, r6, #4
     e3e:	405a      	eors	r2, r3
     e40:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     e42:	f002 0301 	and.w	r3, r2, #1
     e46:	3c01      	subs	r4, #1
     e48:	fb01 f303 	mul.w	r3, r1, r3
     e4c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     e50:	d1f7      	bne.n	e42 <unused_interrupt_vector+0x6a>
	while (p < end) {
     e52:	42a8      	cmp	r0, r5
     e54:	d002      	beq.n	e5c <unused_interrupt_vector+0x84>
		crc ^= *p++;
     e56:	6873      	ldr	r3, [r6, #4]
     e58:	4606      	mov	r6, r0
     e5a:	e7ef      	b.n	e3c <unused_interrupt_vector+0x64>
	info->crc = crc;
     e5c:	4b32      	ldr	r3, [pc, #200]	; (f28 <unused_interrupt_vector+0x150>)
     e5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     e62:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     e66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     e6a:	4930      	ldr	r1, [pc, #192]	; (f2c <unused_interrupt_vector+0x154>)
     e6c:	4a32      	ldr	r2, [pc, #200]	; (f38 <unused_interrupt_vector+0x160>)
     e6e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     e72:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     e76:	f3bf 8f4f 	dsb	sy
	asm("isb");
     e7a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e7e:	4a2f      	ldr	r2, [pc, #188]	; (f3c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     e80:	2502      	movs	r5, #2
     e82:	482f      	ldr	r0, [pc, #188]	; (f40 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e84:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     e86:	492f      	ldr	r1, [pc, #188]	; (f44 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e88:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     e8c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     e8e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     e90:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     e92:	482d      	ldr	r0, [pc, #180]	; (f48 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e9c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     e9e:	680b      	ldr	r3, [r1, #0]
     ea0:	4283      	cmp	r3, r0
     ea2:	d83d      	bhi.n	f20 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     ea4:	4d26      	ldr	r5, [pc, #152]	; (f40 <unused_interrupt_vector+0x168>)
     ea6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     ea8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     eb0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     eb2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     eb4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     eb8:	4924      	ldr	r1, [pc, #144]	; (f4c <unused_interrupt_vector+0x174>)
     eba:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     ebe:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     ec2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     ec6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     eca:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     ece:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     ed2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     ed6:	e001      	b.n	edc <unused_interrupt_vector+0x104>
		usb_isr();
     ed8:	f000 f938 	bl	114c <usb_isr>
		if (PIT_TFLG0) {
     edc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     ee0:	2b00      	cmp	r3, #0
     ee2:	d0f9      	beq.n	ed8 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     ee4:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     ee6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     eea:	2c4f      	cmp	r4, #79	; 0x4f
     eec:	d9f4      	bls.n	ed8 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     eee:	4b18      	ldr	r3, [pc, #96]	; (f50 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     ef0:	2002      	movs	r0, #2
     ef2:	4918      	ldr	r1, [pc, #96]	; (f54 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     ef4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     ef8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     efc:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     efe:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     f02:	b93b      	cbnz	r3, f14 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     f04:	4814      	ldr	r0, [pc, #80]	; (f58 <unused_interrupt_vector+0x180>)
     f06:	4915      	ldr	r1, [pc, #84]	; (f5c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     f08:	4a0d      	ldr	r2, [pc, #52]	; (f40 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     f0a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     f0c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     f10:	2b00      	cmp	r3, #0
     f12:	d0fa      	beq.n	f0a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     f14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     f18:	4a11      	ldr	r2, [pc, #68]	; (f60 <unused_interrupt_vector+0x188>)
     f1a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     f1e:	e7fe      	b.n	f1e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     f20:	f001 f91e 	bl	2160 <set_arm_clock>
     f24:	e7be      	b.n	ea4 <unused_interrupt_vector+0xcc>
     f26:	bf00      	nop
     f28:	2027ff00 	.word	0x2027ff00
     f2c:	2027ff80 	.word	0x2027ff80
     f30:	2027ffa8 	.word	0x2027ffa8
     f34:	edb88320 	.word	0xedb88320
     f38:	2027ffa0 	.word	0x2027ffa0
     f3c:	400fc000 	.word	0x400fc000
     f40:	40084000 	.word	0x40084000
     f44:	200006f8 	.word	0x200006f8
     f48:	0bcd3d80 	.word	0x0bcd3d80
     f4c:	00249f00 	.word	0x00249f00
     f50:	400d9000 	.word	0x400d9000
     f54:	402e0000 	.word	0x402e0000
     f58:	400f8000 	.word	0x400f8000
     f5c:	0bad00f1 	.word	0x0bad00f1
     f60:	05fa0004 	.word	0x05fa0004

00000f64 <Panic_Temp_isr>:
  unused_interrupt_vector();
     f64:	f7ff bf38 	b.w	dd8 <unused_interrupt_vector>

00000f68 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     f68:	4a12      	ldr	r2, [pc, #72]	; (fb4 <tempmonGetTemp+0x4c>)
     f6a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     f6e:	075b      	lsls	r3, r3, #29
     f70:	d5fb      	bpl.n	f6a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     f72:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     f76:	4810      	ldr	r0, [pc, #64]	; (fb8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     f78:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     f7c:	490f      	ldr	r1, [pc, #60]	; (fbc <tempmonGetTemp+0x54>)
     f7e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     f82:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     f86:	ed91 6a00 	vldr	s12, [r1]
     f8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     f8e:	4a0c      	ldr	r2, [pc, #48]	; (fc0 <tempmonGetTemp+0x58>)
     f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     f94:	4b0b      	ldr	r3, [pc, #44]	; (fc4 <tempmonGetTemp+0x5c>)
     f96:	edd2 6a00 	vldr	s13, [r2]
     f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
     f9e:	ed93 7a00 	vldr	s14, [r3]
     fa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     fa6:	ee67 7a86 	vmul.f32	s15, s15, s12
     faa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     fae:	ee37 0a40 	vsub.f32	s0, s14, s0
     fb2:	4770      	bx	lr
     fb4:	400d8100 	.word	0x400d8100
     fb8:	20001118 	.word	0x20001118
     fbc:	20001120 	.word	0x20001120
     fc0:	20001124 	.word	0x20001124
     fc4:	2000111c 	.word	0x2000111c

00000fc8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     fc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     fca:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     fcc:	b11b      	cbz	r3, fd6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     fce:	6853      	ldr	r3, [r2, #4]
     fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     fd4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     fd6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     fd8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     fda:	b33c      	cbz	r4, 102c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     fdc:	4b1a      	ldr	r3, [pc, #104]	; (1048 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     fde:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     fe0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     fe4:	420c      	tst	r4, r1
     fe6:	d11d      	bne.n	1024 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     fe8:	4e18      	ldr	r6, [pc, #96]	; (104c <schedule_transfer+0x84>)
     fea:	6877      	ldr	r7, [r6, #4]
     fec:	e004      	b.n	ff8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     fee:	6874      	ldr	r4, [r6, #4]
     ff0:	1be4      	subs	r4, r4, r7
     ff2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     ff6:	d20b      	bcs.n	1010 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     ff8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     ffc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1000:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1004:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1008:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    100c:	0464      	lsls	r4, r4, #17
    100e:	d5ee      	bpl.n	fee <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1010:	400d      	ands	r5, r1
    1012:	d107      	bne.n	1024 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1014:	4c0c      	ldr	r4, [pc, #48]	; (1048 <schedule_transfer+0x80>)
		endpoint->status = 0;
    1016:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    101a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    101e:	430b      	orrs	r3, r1
    1020:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1024:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1026:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1028:	bcf0      	pop	{r4, r5, r6, r7}
    102a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    102c:	4d06      	ldr	r5, [pc, #24]	; (1048 <schedule_transfer+0x80>)
	endpoint->status = 0;
    102e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    1032:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1036:	430b      	orrs	r3, r1
    1038:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    103c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    103e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1040:	b662      	cpsie	i
}
    1042:	bcf0      	pop	{r4, r5, r6, r7}
    1044:	4770      	bx	lr
    1046:	bf00      	nop
    1048:	402e0000 	.word	0x402e0000
    104c:	e0001000 	.word	0xe0001000

00001050 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1050:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1052:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1054:	b19d      	cbz	r5, 107e <run_callbacks+0x2e>
    1056:	4606      	mov	r6, r0
    1058:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    105a:	2400      	movs	r4, #0
    105c:	e003      	b.n	1066 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    105e:	6812      	ldr	r2, [r2, #0]
		count++;
    1060:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1062:	2a01      	cmp	r2, #1
    1064:	d00c      	beq.n	1080 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1066:	6853      	ldr	r3, [r2, #4]
    1068:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    106c:	d0f7      	beq.n	105e <run_callbacks+0xe>
			ep->first_transfer = t;
    106e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1070:	b12c      	cbz	r4, 107e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1072:	4628      	mov	r0, r5
		ep->callback_function(first);
    1074:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1076:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1078:	4798      	blx	r3
	while (count) {
    107a:	3c01      	subs	r4, #1
    107c:	d1f9      	bne.n	1072 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    107e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1080:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1084:	e7f4      	b.n	1070 <run_callbacks+0x20>
    1086:	bf00      	nop

00001088 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1088:	b430      	push	{r4, r5}
	if (len > 0) {
    108a:	b9d9      	cbnz	r1, 10c4 <endpoint0_transmit.constprop.0+0x3c>
    108c:	4c1f      	ldr	r4, [pc, #124]	; (110c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    108e:	4b20      	ldr	r3, [pc, #128]	; (1110 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    1090:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1092:	4a20      	ldr	r2, [pc, #128]	; (1114 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    1094:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1096:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    109a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    109c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    109e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10a2:	2480      	movs	r4, #128	; 0x80
    10a4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    10a6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    10aa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    10ae:	481a      	ldr	r0, [pc, #104]	; (1118 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    10b0:	432b      	orrs	r3, r5
    10b2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    10b6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    10b8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    10bc:	2b00      	cmp	r3, #0
    10be:	d1fb      	bne.n	10b8 <endpoint0_transmit.constprop.0+0x30>
}
    10c0:	bc30      	pop	{r4, r5}
    10c2:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10c4:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    10c6:	4b15      	ldr	r3, [pc, #84]	; (111c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    10c8:	4c10      	ldr	r4, [pc, #64]	; (110c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    10ca:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    10d0:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    10d2:	4a10      	ldr	r2, [pc, #64]	; (1114 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10d4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10d6:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    10da:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10dc:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10de:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    10e2:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10e4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10e6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    10ea:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10ee:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    10f0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    10f2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    10f4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    10f6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    10fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    10fe:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1102:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1106:	2b00      	cmp	r3, #0
    1108:	d1fb      	bne.n	1102 <endpoint0_transmit.constprop.0+0x7a>
    110a:	e7c0      	b.n	108e <endpoint0_transmit.constprop.0+0x6>
    110c:	20000000 	.word	0x20000000
    1110:	20000ec0 	.word	0x20000ec0
    1114:	402e0000 	.word	0x402e0000
    1118:	200010c0 	.word	0x200010c0
    111c:	20000ee0 	.word	0x20000ee0

00001120 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1120:	4908      	ldr	r1, [pc, #32]	; (1144 <usb_stop_sof_interrupts+0x24>)
    1122:	2201      	movs	r2, #1
    1124:	780b      	ldrb	r3, [r1, #0]
    1126:	fa02 f000 	lsl.w	r0, r2, r0
    112a:	ea23 0000 	bic.w	r0, r3, r0
    112e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1130:	b930      	cbnz	r0, 1140 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1132:	4a05      	ldr	r2, [pc, #20]	; (1148 <usb_stop_sof_interrupts+0x28>)
    1134:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    113c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1140:	4770      	bx	lr
    1142:	bf00      	nop
    1144:	20001160 	.word	0x20001160
    1148:	402e0000 	.word	0x402e0000

0000114c <usb_isr>:
{
    114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1150:	4c97      	ldr	r4, [pc, #604]	; (13b0 <usb_isr+0x264>)
{
    1152:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    1154:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1158:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    115a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    115e:	d553      	bpl.n	1208 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1160:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1164:	2a00      	cmp	r2, #0
    1166:	d04a      	beq.n	11fe <usb_isr+0xb2>
    1168:	4e92      	ldr	r6, [pc, #584]	; (13b4 <usb_isr+0x268>)
    116a:	f8df a260 	ldr.w	sl, [pc, #608]	; 13cc <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    116e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 13e4 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1172:	f8df b274 	ldr.w	fp, [pc, #628]	; 13e8 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1176:	f8df 8274 	ldr.w	r8, [pc, #628]	; 13ec <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    117a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    117e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1182:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    118a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    118e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1192:	049d      	lsls	r5, r3, #18
    1194:	d5f5      	bpl.n	1182 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1196:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    119a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    119e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    11a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    11a6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    11aa:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    11ae:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    11b2:	d1fa      	bne.n	11aa <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    11b4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    11b6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    11b8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    11bc:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    11c0:	f000 81cf 	beq.w	1562 <usb_isr+0x416>
    11c4:	f200 80db 	bhi.w	137e <usb_isr+0x232>
    11c8:	f240 3102 	movw	r1, #770	; 0x302
    11cc:	428b      	cmp	r3, r1
    11ce:	f000 81e7 	beq.w	15a0 <usb_isr+0x454>
    11d2:	f200 809a 	bhi.w	130a <usb_isr+0x1be>
    11d6:	2b82      	cmp	r3, #130	; 0x82
    11d8:	f000 81cb 	beq.w	1572 <usb_isr+0x426>
    11dc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    11e0:	f040 808a 	bne.w	12f8 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    11e4:	f010 0f78 	tst.w	r0, #120	; 0x78
    11e8:	b283      	uxth	r3, r0
    11ea:	f000 8203 	beq.w	15f4 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    11ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    11f2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    11f6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    11fa:	2a00      	cmp	r2, #0
    11fc:	d1bd      	bne.n	117a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    11fe:	4a6c      	ldr	r2, [pc, #432]	; (13b0 <usb_isr+0x264>)
    1200:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1204:	2b00      	cmp	r3, #0
    1206:	d142      	bne.n	128e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1208:	067e      	lsls	r6, r7, #25
    120a:	d516      	bpl.n	123a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    120c:	4b68      	ldr	r3, [pc, #416]	; (13b0 <usb_isr+0x264>)
    120e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1212:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1216:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    121a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    121e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1222:	2c00      	cmp	r4, #0
    1224:	d1fb      	bne.n	121e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    122a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    122e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    1232:	f000 fd2d 	bl	1c90 <usb_serial_reset>
		endpointN_notify_mask = 0;
    1236:	4b60      	ldr	r3, [pc, #384]	; (13b8 <usb_isr+0x26c>)
    1238:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    123a:	01fc      	lsls	r4, r7, #7
    123c:	d503      	bpl.n	1246 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    123e:	4b5f      	ldr	r3, [pc, #380]	; (13bc <usb_isr+0x270>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	b103      	cbz	r3, 1246 <usb_isr+0xfa>
    1244:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1246:	01b8      	lsls	r0, r7, #6
    1248:	d503      	bpl.n	1252 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    124a:	4b5d      	ldr	r3, [pc, #372]	; (13c0 <usb_isr+0x274>)
    124c:	681b      	ldr	r3, [r3, #0]
    124e:	b103      	cbz	r3, 1252 <usb_isr+0x106>
    1250:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1252:	0779      	lsls	r1, r7, #29
    1254:	d508      	bpl.n	1268 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1256:	4b56      	ldr	r3, [pc, #344]	; (13b0 <usb_isr+0x264>)
    1258:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    125c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1260:	d047      	beq.n	12f2 <usb_isr+0x1a6>
			usb_high_speed = 1;
    1262:	4b58      	ldr	r3, [pc, #352]	; (13c4 <usb_isr+0x278>)
    1264:	2201      	movs	r2, #1
    1266:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1268:	4b51      	ldr	r3, [pc, #324]	; (13b0 <usb_isr+0x264>)
    126a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    126e:	061a      	lsls	r2, r3, #24
    1270:	d50a      	bpl.n	1288 <usb_isr+0x13c>
    1272:	063b      	lsls	r3, r7, #24
    1274:	d508      	bpl.n	1288 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    1276:	4a54      	ldr	r2, [pc, #336]	; (13c8 <usb_isr+0x27c>)
    1278:	7813      	ldrb	r3, [r2, #0]
    127a:	b12b      	cbz	r3, 1288 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    127c:	3b01      	subs	r3, #1
    127e:	b2db      	uxtb	r3, r3
    1280:	7013      	strb	r3, [r2, #0]
    1282:	2b00      	cmp	r3, #0
    1284:	f000 8272 	beq.w	176c <usb_isr+0x620>
}
    1288:	b003      	add	sp, #12
    128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    128e:	494f      	ldr	r1, [pc, #316]	; (13cc <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    1290:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    1294:	6808      	ldr	r0, [r1, #0]
    1296:	4203      	tst	r3, r0
    1298:	f040 81d1 	bne.w	163e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    129c:	4a46      	ldr	r2, [pc, #280]	; (13b8 <usb_isr+0x26c>)
    129e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    12a0:	401c      	ands	r4, r3
    12a2:	d0b1      	beq.n	1208 <usb_isr+0xbc>
				while (tx) {
    12a4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    12a8:	d010      	beq.n	12cc <usb_isr+0x180>
    12aa:	4e42      	ldr	r6, [pc, #264]	; (13b4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    12ac:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    12b0:	fa98 f5a8 	rbit	r5, r8
    12b4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    12b8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    12bc:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    12c0:	3040      	adds	r0, #64	; 0x40
    12c2:	f7ff fec5 	bl	1050 <run_callbacks>
				while (tx) {
    12c6:	ea38 0805 	bics.w	r8, r8, r5
    12ca:	d1f1      	bne.n	12b0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    12cc:	b2a4      	uxth	r4, r4
				while(rx) {
    12ce:	2c00      	cmp	r4, #0
    12d0:	d09a      	beq.n	1208 <usb_isr+0xbc>
    12d2:	4e38      	ldr	r6, [pc, #224]	; (13b4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    12d4:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    12d8:	fa94 f5a4 	rbit	r5, r4
    12dc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    12e0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    12e4:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    12e8:	f7ff feb2 	bl	1050 <run_callbacks>
				while(rx) {
    12ec:	43ac      	bics	r4, r5
    12ee:	d1f3      	bne.n	12d8 <usb_isr+0x18c>
    12f0:	e78a      	b.n	1208 <usb_isr+0xbc>
			usb_high_speed = 0;
    12f2:	4a34      	ldr	r2, [pc, #208]	; (13c4 <usb_isr+0x278>)
    12f4:	7013      	strb	r3, [r2, #0]
    12f6:	e7b7      	b.n	1268 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    12f8:	2b80      	cmp	r3, #128	; 0x80
    12fa:	f47f af78 	bne.w	11ee <usb_isr+0xa2>
		reply_buffer[0] = 0;
    12fe:	4834      	ldr	r0, [pc, #208]	; (13d0 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1300:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    1302:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1304:	f7ff fec0 	bl	1088 <endpoint0_transmit.constprop.0>
		return;
    1308:	e775      	b.n	11f6 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    130a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    130e:	f000 810b 	beq.w	1528 <usb_isr+0x3dc>
    1312:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1316:	2b01      	cmp	r3, #1
    1318:	f63f af69 	bhi.w	11ee <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    131c:	4b2d      	ldr	r3, [pc, #180]	; (13d4 <usb_isr+0x288>)
    131e:	685d      	ldr	r5, [r3, #4]
    1320:	2d00      	cmp	r5, #0
    1322:	f43f af64 	beq.w	11ee <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1326:	fa1f fc8c 	uxth.w	ip, ip
    132a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    132e:	e004      	b.n	133a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1330:	691d      	ldr	r5, [r3, #16]
    1332:	330c      	adds	r3, #12
    1334:	2d00      	cmp	r5, #0
    1336:	f43f af5a 	beq.w	11ee <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    133a:	881a      	ldrh	r2, [r3, #0]
    133c:	4572      	cmp	r2, lr
    133e:	d1f7      	bne.n	1330 <usb_isr+0x1e4>
    1340:	885a      	ldrh	r2, [r3, #2]
    1342:	4562      	cmp	r2, ip
    1344:	d1f4      	bne.n	1330 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1346:	ea4f 221e 	mov.w	r2, lr, lsr #8
    134a:	2a03      	cmp	r2, #3
    134c:	f000 81a5 	beq.w	169a <usb_isr+0x54e>
					datalen = list->length;
    1350:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1352:	0c00      	lsrs	r0, r0, #16
    1354:	4282      	cmp	r2, r0
    1356:	bf28      	it	cs
    1358:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    135a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    135e:	f040 81a1 	bne.w	16a4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1362:	4b18      	ldr	r3, [pc, #96]	; (13c4 <usb_isr+0x278>)
    1364:	491c      	ldr	r1, [pc, #112]	; (13d8 <usb_isr+0x28c>)
    1366:	7818      	ldrb	r0, [r3, #0]
    1368:	4b1c      	ldr	r3, [pc, #112]	; (13dc <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    136a:	9201      	str	r2, [sp, #4]
    136c:	2800      	cmp	r0, #0
    136e:	bf18      	it	ne
    1370:	4619      	movne	r1, r3
    1372:	481b      	ldr	r0, [pc, #108]	; (13e0 <usb_isr+0x294>)
    1374:	f7ff fc64 	bl	c40 <memcpy>
    1378:	4d19      	ldr	r5, [pc, #100]	; (13e0 <usb_isr+0x294>)
    137a:	9a01      	ldr	r2, [sp, #4]
    137c:	e1e1      	b.n	1742 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    137e:	f242 2121 	movw	r1, #8737	; 0x2221
    1382:	428b      	cmp	r3, r1
    1384:	d07c      	beq.n	1480 <usb_isr+0x334>
    1386:	d933      	bls.n	13f0 <usb_isr+0x2a4>
    1388:	f242 3121 	movw	r1, #8993	; 0x2321
    138c:	428b      	cmp	r3, r1
    138e:	f000 8081 	beq.w	1494 <usb_isr+0x348>
    1392:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    1396:	428b      	cmp	r3, r1
    1398:	f47f af29 	bne.w	11ee <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    139c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    13a0:	b283      	uxth	r3, r0
    13a2:	f47f af24 	bne.w	11ee <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    13a6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    13aa:	f363 0c0f 	bfi	ip, r3, #0, #16
    13ae:	e7b5      	b.n	131c <usb_isr+0x1d0>
    13b0:	402e0000 	.word	0x402e0000
    13b4:	20000000 	.word	0x20000000
    13b8:	200010c4 	.word	0x200010c4
    13bc:	2000114c 	.word	0x2000114c
    13c0:	20001150 	.word	0x20001150
    13c4:	20001167 	.word	0x20001167
    13c8:	20001168 	.word	0x20001168
    13cc:	200010c0 	.word	0x200010c0
    13d0:	200010e0 	.word	0x200010e0
    13d4:	20000670 	.word	0x20000670
    13d8:	60001b2c 	.word	0x60001b2c
    13dc:	60001b90 	.word	0x60001b90
    13e0:	20200000 	.word	0x20200000
    13e4:	200010b8 	.word	0x200010b8
    13e8:	b8c6cf5d 	.word	0xb8c6cf5d
    13ec:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    13f0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    13f4:	d066      	beq.n	14c4 <usb_isr+0x378>
    13f6:	f242 0121 	movw	r1, #8225	; 0x2021
    13fa:	428b      	cmp	r3, r1
    13fc:	f47f aef7 	bne.w	11ee <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1400:	0c03      	lsrs	r3, r0, #16
    1402:	2b07      	cmp	r3, #7
    1404:	f47f aef3 	bne.w	11ee <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1408:	4bb2      	ldr	r3, [pc, #712]	; (16d4 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    140a:	49b3      	ldr	r1, [pc, #716]	; (16d8 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    140c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    140e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1410:	49b2      	ldr	r1, [pc, #712]	; (16dc <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1412:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1414:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1418:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    141c:	2201      	movs	r2, #1
    141e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1420:	4aaf      	ldr	r2, [pc, #700]	; (16e0 <usb_isr+0x594>)
    1422:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1424:	4aaf      	ldr	r2, [pc, #700]	; (16e4 <usb_isr+0x598>)
    1426:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1428:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    142c:	f041 0101 	orr.w	r1, r1, #1
    1430:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1434:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1438:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    143c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    143e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1440:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1444:	2b00      	cmp	r3, #0
    1446:	d1fb      	bne.n	1440 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1448:	4aa7      	ldr	r2, [pc, #668]	; (16e8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    144a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    144c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    144e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1450:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1452:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1454:	f248 0380 	movw	r3, #32896	; 0x8080
    1458:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    145a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    145e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1462:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    146a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    146e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1472:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    1476:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    147a:	2b00      	cmp	r3, #0
    147c:	d1fb      	bne.n	1476 <usb_isr+0x32a>
    147e:	e6ba      	b.n	11f6 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1480:	b280      	uxth	r0, r0
    1482:	b938      	cbnz	r0, 1494 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1484:	4b99      	ldr	r3, [pc, #612]	; (16ec <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1486:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    148a:	6819      	ldr	r1, [r3, #0]
    148c:	4b98      	ldr	r3, [pc, #608]	; (16f0 <usb_isr+0x5a4>)
    148e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1490:	4b98      	ldr	r3, [pc, #608]	; (16f4 <usb_isr+0x5a8>)
    1492:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    1494:	4b94      	ldr	r3, [pc, #592]	; (16e8 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    1496:	2200      	movs	r2, #0
    1498:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    149a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    149c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    149e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    14a0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14a2:	2280      	movs	r2, #128	; 0x80
    14a4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    14a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    14aa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    14ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    14b6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    14ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14be:	2b00      	cmp	r3, #0
    14c0:	d1fb      	bne.n	14ba <usb_isr+0x36e>
    14c2:	e698      	b.n	11f6 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    14c4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    14c8:	4b8b      	ldr	r3, [pc, #556]	; (16f8 <usb_isr+0x5ac>)
    14ca:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    14cc:	4b8b      	ldr	r3, [pc, #556]	; (16fc <usb_isr+0x5b0>)
    14ce:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    14d2:	4b8b      	ldr	r3, [pc, #556]	; (1700 <usb_isr+0x5b4>)
    14d4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    14d8:	4b8a      	ldr	r3, [pc, #552]	; (1704 <usb_isr+0x5b8>)
    14da:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    14de:	f000 fbd9 	bl	1c94 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	4629      	mov	r1, r5
    14e6:	4888      	ldr	r0, [pc, #544]	; (1708 <usb_isr+0x5bc>)
    14e8:	f001 f87c 	bl	25e4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    14ec:	4b87      	ldr	r3, [pc, #540]	; (170c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14ee:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    14f0:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    14f4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    14f8:	4b7b      	ldr	r3, [pc, #492]	; (16e8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    14fa:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14fc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    14fe:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1500:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    1502:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1504:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1506:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    150a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    150e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1516:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    151a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    151e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1522:	2b00      	cmp	r3, #0
    1524:	d1fb      	bne.n	151e <usb_isr+0x3d2>
    1526:	e666      	b.n	11f6 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1528:	4b6f      	ldr	r3, [pc, #444]	; (16e8 <usb_isr+0x59c>)
    152a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    152c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    152e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1530:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1532:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1534:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1536:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1538:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    153c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1540:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1548:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    154c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1550:	2b00      	cmp	r3, #0
    1552:	d1fb      	bne.n	154c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1554:	0c13      	lsrs	r3, r2, #16
    1556:	065b      	lsls	r3, r3, #25
    1558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    155c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1560:	e649      	b.n	11f6 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    1562:	4b65      	ldr	r3, [pc, #404]	; (16f8 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1564:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    1566:	486a      	ldr	r0, [pc, #424]	; (1710 <usb_isr+0x5c4>)
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    156c:	f7ff fd8c 	bl	1088 <endpoint0_transmit.constprop.0>
		return;
    1570:	e641      	b.n	11f6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1572:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    1574:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    1578:	f47f ae39 	bne.w	11ee <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    157c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1580:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    1584:	4a62      	ldr	r2, [pc, #392]	; (1710 <usb_isr+0x5c4>)
    1586:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1588:	0618      	lsls	r0, r3, #24
    158a:	f100 809e 	bmi.w	16ca <usb_isr+0x57e>
    158e:	07cb      	lsls	r3, r1, #31
    1590:	d501      	bpl.n	1596 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    1592:	2301      	movs	r3, #1
    1594:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1596:	2102      	movs	r1, #2
    1598:	485d      	ldr	r0, [pc, #372]	; (1710 <usb_isr+0x5c4>)
    159a:	f7ff fd75 	bl	1088 <endpoint0_transmit.constprop.0>
		return;
    159e:	e62a      	b.n	11f6 <usb_isr+0xaa>
		if (endpoint > 7) break;
    15a0:	f010 0f78 	tst.w	r0, #120	; 0x78
    15a4:	b283      	uxth	r3, r0
    15a6:	f47f ae22 	bne.w	11ee <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    15aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    15ae:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    15b2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    15b6:	bf14      	ite	ne
    15b8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    15bc:	f043 0301 	orreq.w	r3, r3, #1
    15c0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    15c4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    15c6:	4b48      	ldr	r3, [pc, #288]	; (16e8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    15c8:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    15ca:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    15cc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15ce:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    15d0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15d2:	2280      	movs	r2, #128	; 0x80
    15d4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    15d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    15da:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    15e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    15e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    15ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    15ee:	2b00      	cmp	r3, #0
    15f0:	d1fb      	bne.n	15ea <usb_isr+0x49e>
    15f2:	e600      	b.n	11f6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    15f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    15f8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    15fc:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1600:	bf14      	ite	ne
    1602:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1606:	f023 0301 	biceq.w	r3, r3, #1
    160a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    160e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1610:	4b35      	ldr	r3, [pc, #212]	; (16e8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1612:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1614:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1616:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1618:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    161a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    161c:	2280      	movs	r2, #128	; 0x80
    161e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1620:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1624:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1628:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1630:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1634:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1638:	2b00      	cmp	r3, #0
    163a:	d1fb      	bne.n	1634 <usb_isr+0x4e8>
    163c:	e5db      	b.n	11f6 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    163e:	2000      	movs	r0, #0
    1640:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1642:	4926      	ldr	r1, [pc, #152]	; (16dc <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1644:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1646:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1648:	f242 0121 	movw	r1, #8225	; 0x2021
    164c:	428c      	cmp	r4, r1
    164e:	f47f ae25 	bne.w	129c <usb_isr+0x150>
    1652:	b280      	uxth	r0, r0
    1654:	2800      	cmp	r0, #0
    1656:	f47f ae21 	bne.w	129c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    165a:	492e      	ldr	r1, [pc, #184]	; (1714 <usb_isr+0x5c8>)
    165c:	4c2e      	ldr	r4, [pc, #184]	; (1718 <usb_isr+0x5cc>)
    165e:	c903      	ldmia	r1, {r0, r1}
    1660:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    1662:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1664:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1668:	6020      	str	r0, [r4, #0]
    166a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    166c:	f47f ae16 	bne.w	129c <usb_isr+0x150>
	__disable_irq();
    1670:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1672:	482a      	ldr	r0, [pc, #168]	; (171c <usb_isr+0x5d0>)
    1674:	7801      	ldrb	r1, [r0, #0]
    1676:	f041 0108 	orr.w	r1, r1, #8
    167a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    167c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1680:	060d      	lsls	r5, r1, #24
    1682:	d405      	bmi.n	1690 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1684:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1686:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1688:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    168c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    1690:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1692:	4a23      	ldr	r2, [pc, #140]	; (1720 <usb_isr+0x5d4>)
    1694:	2150      	movs	r1, #80	; 0x50
    1696:	7011      	strb	r1, [r2, #0]
    1698:	e600      	b.n	129c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    169a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    169c:	782a      	ldrb	r2, [r5, #0]
    169e:	4282      	cmp	r2, r0
    16a0:	bf28      	it	cs
    16a2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    16a4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    16a8:	d144      	bne.n	1734 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    16aa:	4b1e      	ldr	r3, [pc, #120]	; (1724 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    16ac:	4d1e      	ldr	r5, [pc, #120]	; (1728 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    16ae:	7818      	ldrb	r0, [r3, #0]
    16b0:	491e      	ldr	r1, [pc, #120]	; (172c <usb_isr+0x5e0>)
    16b2:	4b1f      	ldr	r3, [pc, #124]	; (1730 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    16b4:	9201      	str	r2, [sp, #4]
    16b6:	2800      	cmp	r0, #0
    16b8:	bf18      	it	ne
    16ba:	4619      	movne	r1, r3
    16bc:	4628      	mov	r0, r5
    16be:	f7ff fabf 	bl	c40 <memcpy>
					usb_descriptor_buffer[1] = 7;
    16c2:	2307      	movs	r3, #7
    16c4:	706b      	strb	r3, [r5, #1]
    16c6:	9a01      	ldr	r2, [sp, #4]
    16c8:	e03b      	b.n	1742 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    16ca:	03c9      	lsls	r1, r1, #15
    16cc:	f53f af61 	bmi.w	1592 <usb_isr+0x446>
    16d0:	e761      	b.n	1596 <usb_isr+0x44a>
    16d2:	bf00      	nop
    16d4:	20000ee0 	.word	0x20000ee0
    16d8:	200020b8 	.word	0x200020b8
    16dc:	20001080 	.word	0x20001080
    16e0:	00070080 	.word	0x00070080
    16e4:	200030b8 	.word	0x200030b8
    16e8:	20000ec0 	.word	0x20000ec0
    16ec:	20001138 	.word	0x20001138
    16f0:	20001148 	.word	0x20001148
    16f4:	20001165 	.word	0x20001165
    16f8:	20001166 	.word	0x20001166
    16fc:	00cc0002 	.word	0x00cc0002
    1700:	000200c8 	.word	0x000200c8
    1704:	00c80002 	.word	0x00c80002
    1708:	20000080 	.word	0x20000080
    170c:	74d59319 	.word	0x74d59319
    1710:	200010e0 	.word	0x200010e0
    1714:	200010b8 	.word	0x200010b8
    1718:	20001140 	.word	0x20001140
    171c:	20001160 	.word	0x20001160
    1720:	20001168 	.word	0x20001168
    1724:	20001167 	.word	0x20001167
    1728:	20200000 	.word	0x20200000
    172c:	60001b90 	.word	0x60001b90
    1730:	60001b2c 	.word	0x60001b2c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1734:	4629      	mov	r1, r5
    1736:	4d10      	ldr	r5, [pc, #64]	; (1778 <usb_isr+0x62c>)
    1738:	9201      	str	r2, [sp, #4]
    173a:	4628      	mov	r0, r5
    173c:	f7ff fa80 	bl	c40 <memcpy>
    1740:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1742:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1746:	4415      	add	r5, r2
	asm("dsb");
    1748:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    174c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1750:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    1754:	3320      	adds	r3, #32
	} while (location < end_addr);
    1756:	429d      	cmp	r5, r3
    1758:	d8fa      	bhi.n	1750 <usb_isr+0x604>
	asm("dsb");
    175a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    175e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1762:	4805      	ldr	r0, [pc, #20]	; (1778 <usb_isr+0x62c>)
    1764:	4611      	mov	r1, r2
    1766:	f7ff fc8f 	bl	1088 <endpoint0_transmit.constprop.0>
				return;
    176a:	e544      	b.n	11f6 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    176c:	2003      	movs	r0, #3
    176e:	f7ff fcd7 	bl	1120 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    1772:	f000 ffb1 	bl	26d8 <___reboot_Teensyduino__veneer>
    1776:	bf00      	nop
    1778:	20200000 	.word	0x20200000

0000177c <usb_config_rx>:
{
    177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1780:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1782:	1e83      	subs	r3, r0, #2
    1784:	2b02      	cmp	r3, #2
    1786:	d901      	bls.n	178c <usb_config_rx+0x10>
}
    1788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    178c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 17dc <usb_config_rx+0x60>
    1790:	4615      	mov	r5, r2
    1792:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    1794:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1796:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    179a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    179c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    17a0:	2100      	movs	r1, #0
    17a2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17a6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    17a8:	f000 ff1c 	bl	25e4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17ac:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    17b0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17b2:	0952      	lsrs	r2, r2, #5
    17b4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    17b8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    17bc:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    17c0:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    17c4:	2f00      	cmp	r7, #0
    17c6:	d0df      	beq.n	1788 <usb_config_rx+0xc>
    17c8:	4a03      	ldr	r2, [pc, #12]	; (17d8 <usb_config_rx+0x5c>)
    17ca:	40b3      	lsls	r3, r6
    17cc:	6811      	ldr	r1, [r2, #0]
    17ce:	430b      	orrs	r3, r1
    17d0:	6013      	str	r3, [r2, #0]
}
    17d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17d6:	bf00      	nop
    17d8:	200010c4 	.word	0x200010c4
    17dc:	20000000 	.word	0x20000000

000017e0 <usb_config_tx>:
{
    17e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17e4:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    17e6:	1e81      	subs	r1, r0, #2
    17e8:	2902      	cmp	r1, #2
    17ea:	d901      	bls.n	17f0 <usb_config_tx+0x10>
}
    17ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    17f0:	01c7      	lsls	r7, r0, #7
    17f2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1840 <usb_config_tx+0x60>
    17f6:	4692      	mov	sl, r2
    17f8:	4604      	mov	r4, r0
    17fa:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    17fc:	223c      	movs	r2, #60	; 0x3c
    17fe:	2100      	movs	r1, #0
    1800:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1802:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1806:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1808:	f108 0004 	add.w	r0, r8, #4
    180c:	f000 feea 	bl	25e4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1810:	faba f28a 	clz	r2, sl
    1814:	0952      	lsrs	r2, r2, #5
    1816:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    181a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    181e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1820:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1824:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1828:	2e00      	cmp	r6, #0
    182a:	d0df      	beq.n	17ec <usb_config_tx+0xc>
    182c:	4b03      	ldr	r3, [pc, #12]	; (183c <usb_config_tx+0x5c>)
    182e:	3410      	adds	r4, #16
    1830:	6819      	ldr	r1, [r3, #0]
    1832:	40a2      	lsls	r2, r4
    1834:	430a      	orrs	r2, r1
    1836:	601a      	str	r2, [r3, #0]
}
    1838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    183c:	200010c4 	.word	0x200010c4
    1840:	20000000 	.word	0x20000000

00001844 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1844:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1846:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1848:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    184a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    184e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1852:	b410      	push	{r4}
	transfer->next = 1;
    1854:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1856:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1858:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    185c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    185e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1862:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1866:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1868:	6181      	str	r1, [r0, #24]
}
    186a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    186e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1872:	4770      	bx	lr

00001874 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1874:	1e83      	subs	r3, r0, #2
{
    1876:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1878:	2b02      	cmp	r3, #2
    187a:	d900      	bls.n	187e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    187c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    187e:	4b06      	ldr	r3, [pc, #24]	; (1898 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1880:	f100 0110 	add.w	r1, r0, #16
    1884:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1888:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    188c:	fa0c f101 	lsl.w	r1, ip, r1
    1890:	3040      	adds	r0, #64	; 0x40
    1892:	f7ff bb99 	b.w	fc8 <schedule_transfer>
    1896:	bf00      	nop
    1898:	20000000 	.word	0x20000000

0000189c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    189c:	1e83      	subs	r3, r0, #2
{
    189e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    18a0:	2b02      	cmp	r3, #2
    18a2:	d900      	bls.n	18a6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    18a4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    18a6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    18a8:	4b02      	ldr	r3, [pc, #8]	; (18b4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    18aa:	4081      	lsls	r1, r0
    18ac:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    18b0:	f7ff bb8a 	b.w	fc8 <schedule_transfer>
    18b4:	20000000 	.word	0x20000000

000018b8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    18b8:	6840      	ldr	r0, [r0, #4]
#endif
}
    18ba:	4770      	bx	lr

000018bc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18bc:	4a12      	ldr	r2, [pc, #72]	; (1908 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    18be:	4b13      	ldr	r3, [pc, #76]	; (190c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18c0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    18c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    18c8:	4298      	cmp	r0, r3
{
    18ca:	b510      	push	{r4, lr}
    18cc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    18ce:	d202      	bcs.n	18d6 <usb_init_serialnumber+0x1a>
    18d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    18d4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    18d6:	4c0e      	ldr	r4, [pc, #56]	; (1910 <usb_init_serialnumber+0x54>)
    18d8:	a901      	add	r1, sp, #4
    18da:	220a      	movs	r2, #10
    18dc:	f7ff fa4a 	bl	d74 <ultoa>
	for (i=0; i<10; i++) {
    18e0:	a901      	add	r1, sp, #4
    18e2:	2300      	movs	r3, #0
    18e4:	4620      	mov	r0, r4
		char c = buf[i];
    18e6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    18ea:	3301      	adds	r3, #1
		if (!c) break;
    18ec:	b13a      	cbz	r2, 18fe <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    18ee:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    18f0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    18f4:	d1f7      	bne.n	18e6 <usb_init_serialnumber+0x2a>
    18f6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    18f8:	7023      	strb	r3, [r4, #0]
}
    18fa:	b004      	add	sp, #16
    18fc:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    18fe:	005b      	lsls	r3, r3, #1
    1900:	b2db      	uxtb	r3, r3
    1902:	7023      	strb	r3, [r4, #0]
}
    1904:	b004      	add	sp, #16
    1906:	bd10      	pop	{r4, pc}
    1908:	401f4400 	.word	0x401f4400
    190c:	00989680 	.word	0x00989680
    1910:	200009ac 	.word	0x200009ac

00001914 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    1914:	f000 badc 	b.w	1ed0 <usb_serial_flush_input>

00001918 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1918:	f000 baac 	b.w	1e74 <usb_serial_peekchar>

0000191c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    191c:	f000 bb10 	b.w	1f40 <usb_serial_getchar>

00001920 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1920:	f000 baca 	b.w	1eb8 <usb_serial_available>

00001924 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1924:	f000 bb66 	b.w	1ff4 <usb_serial_flush_output>

00001928 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1928:	f000 bb3c 	b.w	1fa4 <usb_serial_write_buffer_free>

0000192c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    192c:	4608      	mov	r0, r1
    192e:	4611      	mov	r1, r2
    1930:	f000 bb2c 	b.w	1f8c <usb_serial_write>

00001934 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1936:	4c14      	ldr	r4, [pc, #80]	; (1988 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1938:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    193c:	4e13      	ldr	r6, [pc, #76]	; (198c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    193e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1942:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1946:	4f12      	ldr	r7, [pc, #72]	; (1990 <rx_queue_transfer+0x5c>)
    1948:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    194c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    194e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1952:	4621      	mov	r1, r4
    1954:	883a      	ldrh	r2, [r7, #0]
    1956:	4630      	mov	r0, r6
    1958:	f7ff ff74 	bl	1844 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    195c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    195e:	4423      	add	r3, r4
	asm("dsb");
    1960:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    1964:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    1968:	3420      	adds	r4, #32
	} while (location < end_addr);
    196a:	42a3      	cmp	r3, r4
    196c:	d8fa      	bhi.n	1964 <rx_queue_transfer+0x30>
	asm("dsb");
    196e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1972:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1976:	2003      	movs	r0, #3
    1978:	4631      	mov	r1, r6
    197a:	f7ff ff8f 	bl	189c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1982:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    1986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1988:	20200080 	.word	0x20200080
    198c:	20000f00 	.word	0x20000f00
    1990:	20001154 	.word	0x20001154

00001994 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1994:	4b24      	ldr	r3, [pc, #144]	; (1a28 <rx_event+0x94>)
{
    1996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    199a:	881c      	ldrh	r4, [r3, #0]
    199c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    199e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    19a0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    19a4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    19a6:	2c00      	cmp	r4, #0
    19a8:	dd24      	ble.n	19f4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    19aa:	4920      	ldr	r1, [pc, #128]	; (1a2c <rx_event+0x98>)
		if (head != rx_tail) {
    19ac:	4820      	ldr	r0, [pc, #128]	; (1a30 <rx_event+0x9c>)
		uint32_t head = rx_head;
    19ae:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    19b0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    19b2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    19b4:	4e1f      	ldr	r6, [pc, #124]	; (1a34 <rx_event+0xa0>)
		if (head != rx_tail) {
    19b6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    19b8:	481f      	ldr	r0, [pc, #124]	; (1a38 <rx_event+0xa4>)
		if (head != rx_tail) {
    19ba:	d007      	beq.n	19cc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    19bc:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    19c0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    19c4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    19c8:	4294      	cmp	r4, r2
    19ca:	d918      	bls.n	19fe <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    19cc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    19ce:	2200      	movs	r2, #0
		rx_count[i] = len;
    19d0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    19d4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    19d6:	4e19      	ldr	r6, [pc, #100]	; (1a3c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    19d8:	bf88      	it	hi
    19da:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    19dc:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    19e0:	bf98      	it	ls
    19e2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    19e4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    19e6:	4b16      	ldr	r3, [pc, #88]	; (1a40 <rx_event+0xac>)
		rx_head = head;
    19e8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    19ea:	681a      	ldr	r2, [r3, #0]
    19ec:	4414      	add	r4, r2
    19ee:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    19f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    19f4:	4628      	mov	r0, r5
}
    19f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    19fa:	f7ff bf9b 	b.w	1934 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    19fe:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1a02:	4910      	ldr	r1, [pc, #64]	; (1a44 <rx_event+0xb0>)
    1a04:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1a06:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1a08:	4408      	add	r0, r1
    1a0a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1a0e:	f7ff f917 	bl	c40 <memcpy>
				rx_available += len;
    1a12:	4a0b      	ldr	r2, [pc, #44]	; (1a40 <rx_event+0xac>)
				rx_queue_transfer(i);
    1a14:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1a16:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1a1a:	6813      	ldr	r3, [r2, #0]
    1a1c:	4423      	add	r3, r4
}
    1a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1a22:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1a24:	f7ff bf86 	b.w	1934 <rx_queue_transfer>
    1a28:	20001154 	.word	0x20001154
    1a2c:	2000115e 	.word	0x2000115e
    1a30:	2000115f 	.word	0x2000115f
    1a34:	200010ec 	.word	0x200010ec
    1a38:	2000110c 	.word	0x2000110c
    1a3c:	200010fc 	.word	0x200010fc
    1a40:	200010e8 	.word	0x200010e8
    1a44:	20200080 	.word	0x20200080

00001a48 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1a48:	4b1d      	ldr	r3, [pc, #116]	; (1ac0 <usb_serial_flush_callback+0x78>)
    1a4a:	781a      	ldrb	r2, [r3, #0]
    1a4c:	2a00      	cmp	r2, #0
    1a4e:	d136      	bne.n	1abe <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    1a50:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1a54:	4a1b      	ldr	r2, [pc, #108]	; (1ac4 <usb_serial_flush_callback+0x7c>)
    1a56:	7812      	ldrb	r2, [r2, #0]
    1a58:	b38a      	cbz	r2, 1abe <usb_serial_flush_callback+0x76>
{
    1a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1a5e:	4d1a      	ldr	r5, [pc, #104]	; (1ac8 <usb_serial_flush_callback+0x80>)
    1a60:	882a      	ldrh	r2, [r5, #0]
    1a62:	b352      	cbz	r2, 1aba <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1a64:	4e19      	ldr	r6, [pc, #100]	; (1acc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1a66:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1a6a:	4f19      	ldr	r7, [pc, #100]	; (1ad0 <usb_serial_flush_callback+0x88>)
    1a6c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1a6e:	4c19      	ldr	r4, [pc, #100]	; (1ad4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1a70:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1a74:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1a78:	4642      	mov	r2, r8
    1a7a:	4638      	mov	r0, r7
    1a7c:	4621      	mov	r1, r4
    1a7e:	f7ff fee1 	bl	1844 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1a82:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1a86:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1a8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1a8e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1a92:	3420      	adds	r4, #32
	} while (location < end_addr);
    1a94:	42a2      	cmp	r2, r4
    1a96:	d8fa      	bhi.n	1a8e <usb_serial_flush_callback+0x46>
	asm("dsb");
    1a98:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a9c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1aa0:	2004      	movs	r0, #4
    1aa2:	4639      	mov	r1, r7
    1aa4:	f7ff fee6 	bl	1874 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1aa8:	7833      	ldrb	r3, [r6, #0]
    1aaa:	3301      	adds	r3, #1
    1aac:	b2db      	uxtb	r3, r3
    1aae:	2b03      	cmp	r3, #3
    1ab0:	bf88      	it	hi
    1ab2:	2300      	movhi	r3, #0
    1ab4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1ab6:	2300      	movs	r3, #0
    1ab8:	802b      	strh	r3, [r5, #0]
}
    1aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1abe:	4770      	bx	lr
    1ac0:	20001164 	.word	0x20001164
    1ac4:	20001166 	.word	0x20001166
    1ac8:	20001156 	.word	0x20001156
    1acc:	20001163 	.word	0x20001163
    1ad0:	20001000 	.word	0x20001000
    1ad4:	20201080 	.word	0x20201080

00001ad8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1adc:	b085      	sub	sp, #20
	while (size > 0) {
    1ade:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1ae2:	2900      	cmp	r1, #0
    1ae4:	f000 80bf 	beq.w	1c66 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1ae8:	2300      	movs	r3, #0
    1aea:	4c60      	ldr	r4, [pc, #384]	; (1c6c <usb_serial_write.part.0+0x194>)
    1aec:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1c88 <usb_serial_write.part.0+0x1b0>
    1af0:	f8df a198 	ldr.w	sl, [pc, #408]	; 1c8c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    1af4:	4f5e      	ldr	r7, [pc, #376]	; (1c70 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    1af6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1af8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1afa:	4a5e      	ldr	r2, [pc, #376]	; (1c74 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    1afc:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1afe:	4b5e      	ldr	r3, [pc, #376]	; (1c78 <usb_serial_write.part.0+0x1a0>)
    1b00:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    1b02:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    1b06:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	f040 80a7 	bne.w	1c5e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    1b10:	461e      	mov	r6, r3
		int waiting=0;
    1b12:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    1b14:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    1b16:	4648      	mov	r0, r9
    1b18:	f7ff fece 	bl	18b8 <usb_transfer_status>
			if (!(status & 0x80)) {
    1b1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    1b20:	f000 808c 	beq.w	1c3c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    1b24:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    1b28:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    1b2c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    1b30:	b905      	cbnz	r5, 1b34 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    1b32:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    1b34:	2b00      	cmp	r3, #0
    1b36:	d17d      	bne.n	1c34 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1b38:	683b      	ldr	r3, [r7, #0]
    1b3a:	1b9b      	subs	r3, r3, r6
    1b3c:	2b78      	cmp	r3, #120	; 0x78
    1b3e:	f200 8087 	bhi.w	1c50 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    1b42:	4b4e      	ldr	r3, [pc, #312]	; (1c7c <usb_serial_write.part.0+0x1a4>)
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d074      	beq.n	1c34 <usb_serial_write.part.0+0x15c>
			yield();
    1b4a:	f000 fa9d 	bl	2088 <yield>
			tx_noautoflush = 1;
    1b4e:	2201      	movs	r2, #1
		while (!tx_available) {
    1b50:	f8b8 3000 	ldrh.w	r3, [r8]
    1b54:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    1b56:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d0dc      	beq.n	1b16 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1b5c:	4a46      	ldr	r2, [pc, #280]	; (1c78 <usb_serial_write.part.0+0x1a0>)
    1b5e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1b62:	7811      	ldrb	r1, [r2, #0]
    1b64:	461a      	mov	r2, r3
    1b66:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    1b6a:	4d45      	ldr	r5, [pc, #276]	; (1c80 <usb_serial_write.part.0+0x1a8>)
    1b6c:	02c9      	lsls	r1, r1, #11
    1b6e:	4428      	add	r0, r5
		if (size >= tx_available) {
    1b70:	9d01      	ldr	r5, [sp, #4]
    1b72:	4295      	cmp	r5, r2
    1b74:	d217      	bcs.n	1ba6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    1b76:	9303      	str	r3, [sp, #12]
    1b78:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    1b7c:	462a      	mov	r2, r5
    1b7e:	f7ff f85f 	bl	c40 <memcpy>
			tx_available -= size;
    1b82:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1b84:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    1b88:	1b5b      	subs	r3, r3, r5
    1b8a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1b8e:	4b3d      	ldr	r3, [pc, #244]	; (1c84 <usb_serial_write.part.0+0x1ac>)
    1b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    1b94:	f3bf 8f4f 	dsb	sy
			sent += size;
    1b98:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    1b9a:	2300      	movs	r3, #0
			sent += size;
    1b9c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    1b9e:	7023      	strb	r3, [r4, #0]
}
    1ba0:	b005      	add	sp, #20
    1ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1ba6:	4b36      	ldr	r3, [pc, #216]	; (1c80 <usb_serial_write.part.0+0x1a8>)
    1ba8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    1baa:	9902      	ldr	r1, [sp, #8]
    1bac:	f7ff f848 	bl	c40 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1bb0:	2300      	movs	r3, #0
    1bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1bb6:	4629      	mov	r1, r5
    1bb8:	4648      	mov	r0, r9
    1bba:	f7ff fe43 	bl	1844 <usb_prepare_transfer>
	asm("dsb");
    1bbe:	f3bf 8f4f 	dsb	sy
    1bc2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    1bc6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1bca:	4293      	cmp	r3, r2
    1bcc:	bf34      	ite	cc
    1bce:	2301      	movcc	r3, #1
    1bd0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    1bd2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1bd6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1bda:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    1bde:	3520      	adds	r5, #32
	} while (location < end_addr);
    1be0:	42ab      	cmp	r3, r5
    1be2:	d1fa      	bne.n	1bda <usb_serial_write.part.0+0x102>
	asm("dsb");
    1be4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1be8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1bec:	2004      	movs	r0, #4
    1bee:	4649      	mov	r1, r9
    1bf0:	f7ff fe40 	bl	1874 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1bf4:	4a20      	ldr	r2, [pc, #128]	; (1c78 <usb_serial_write.part.0+0x1a0>)
    1bf6:	7813      	ldrb	r3, [r2, #0]
    1bf8:	3301      	adds	r3, #1
    1bfa:	b2db      	uxtb	r3, r3
    1bfc:	2b03      	cmp	r3, #3
    1bfe:	bf84      	itt	hi
    1c00:	2300      	movhi	r3, #0
    1c02:	4a1d      	ldrhi	r2, [pc, #116]	; (1c78 <usb_serial_write.part.0+0x1a0>)
    1c04:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1c06:	f8b8 3000 	ldrh.w	r3, [r8]
    1c0a:	9a01      	ldr	r2, [sp, #4]
    1c0c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    1c0e:	9a00      	ldr	r2, [sp, #0]
    1c10:	441a      	add	r2, r3
			size -= tx_available;
    1c12:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    1c14:	9200      	str	r2, [sp, #0]
			data += tx_available;
    1c16:	9a02      	ldr	r2, [sp, #8]
    1c18:	441a      	add	r2, r3
			tx_available = 0;
    1c1a:	2300      	movs	r3, #0
			data += tx_available;
    1c1c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    1c1e:	4a19      	ldr	r2, [pc, #100]	; (1c84 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    1c20:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    1c24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    1c28:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    1c2c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    1c2e:	2900      	cmp	r1, #0
    1c30:	f47f af62 	bne.w	1af8 <usb_serial_write.part.0+0x20>
	return sent;
    1c34:	9800      	ldr	r0, [sp, #0]
}
    1c36:	b005      	add	sp, #20
    1c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    1c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1c40:	4b0d      	ldr	r3, [pc, #52]	; (1c78 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    1c42:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1c46:	7819      	ldrb	r1, [r3, #0]
				break;
    1c48:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    1c4a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    1c4e:	e78a      	b.n	1b66 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    1c50:	2301      	movs	r3, #1
				return sent;
    1c52:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    1c54:	f88a 3000 	strb.w	r3, [sl]
}
    1c58:	b005      	add	sp, #20
    1c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1c5e:	461a      	mov	r2, r3
    1c60:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1c64:	e77f      	b.n	1b66 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    1c66:	9801      	ldr	r0, [sp, #4]
	return sent;
    1c68:	e7e5      	b.n	1c36 <usb_serial_write.part.0+0x15e>
    1c6a:	bf00      	nop
    1c6c:	20001164 	.word	0x20001164
    1c70:	20001138 	.word	0x20001138
    1c74:	20001000 	.word	0x20001000
    1c78:	20001163 	.word	0x20001163
    1c7c:	20001166 	.word	0x20001166
    1c80:	20201080 	.word	0x20201080
    1c84:	402e0000 	.word	0x402e0000
    1c88:	20001156 	.word	0x20001156
    1c8c:	20001161 	.word	0x20001161

00001c90 <usb_serial_reset>:
}
    1c90:	4770      	bx	lr
    1c92:	bf00      	nop

00001c94 <usb_serial_configure>:
	if (usb_high_speed) {
    1c94:	4b2d      	ldr	r3, [pc, #180]	; (1d4c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1c96:	2100      	movs	r1, #0
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	482d      	ldr	r0, [pc, #180]	; (1d50 <usb_serial_configure+0xbc>)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1c9e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1ca0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1ca2:	4d2c      	ldr	r5, [pc, #176]	; (1d54 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1ca4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1ca6:	4e2c      	ldr	r6, [pc, #176]	; (1d58 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1ca8:	bf0c      	ite	eq
    1caa:	2340      	moveq	r3, #64	; 0x40
    1cac:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1cb0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1cb2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1cb4:	f000 fc96 	bl	25e4 <memset>
	tx_head = 0;
    1cb8:	4a28      	ldr	r2, [pc, #160]	; (1d5c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1cba:	4621      	mov	r1, r4
	tx_available = 0;
    1cbc:	4b28      	ldr	r3, [pc, #160]	; (1d60 <usb_serial_configure+0xcc>)
	tx_head = 0;
    1cbe:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
    1cc4:	4827      	ldr	r0, [pc, #156]	; (1d64 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1cc6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1cc8:	f000 fc8c 	bl	25e4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1ccc:	4a26      	ldr	r2, [pc, #152]	; (1d68 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1cce:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1cd0:	4b26      	ldr	r3, [pc, #152]	; (1d6c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1cd2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1cd4:	e9c2 4400 	strd	r4, r4, [r2]
    1cd8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1cdc:	4a24      	ldr	r2, [pc, #144]	; (1d70 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1cde:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1ce2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1ce4:	4a23      	ldr	r2, [pc, #140]	; (1d74 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1ce6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1cea:	4b23      	ldr	r3, [pc, #140]	; (1d78 <usb_serial_configure+0xe4>)
    1cec:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1cee:	4623      	mov	r3, r4
	rx_available = 0;
    1cf0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1cf2:	4622      	mov	r2, r4
    1cf4:	f7ff fd74 	bl	17e0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1cf8:	4622      	mov	r2, r4
    1cfa:	8831      	ldrh	r1, [r6, #0]
    1cfc:	2003      	movs	r0, #3
    1cfe:	4b1f      	ldr	r3, [pc, #124]	; (1d7c <usb_serial_configure+0xe8>)
    1d00:	f7ff fd3c 	bl	177c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1d04:	4623      	mov	r3, r4
    1d06:	2201      	movs	r2, #1
    1d08:	8829      	ldrh	r1, [r5, #0]
    1d0a:	2004      	movs	r0, #4
    1d0c:	f7ff fd68 	bl	17e0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1d10:	4620      	mov	r0, r4
    1d12:	3401      	adds	r4, #1
    1d14:	f7ff fe0e 	bl	1934 <rx_queue_transfer>
    1d18:	2c08      	cmp	r4, #8
    1d1a:	d1f9      	bne.n	1d10 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1d1c:	4b18      	ldr	r3, [pc, #96]	; (1d80 <usb_serial_configure+0xec>)
    1d1e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1d20:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1d22:	4818      	ldr	r0, [pc, #96]	; (1d84 <usb_serial_configure+0xf0>)
    1d24:	4c18      	ldr	r4, [pc, #96]	; (1d88 <usb_serial_configure+0xf4>)
    1d26:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1d28:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1d30:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1d34:	4915      	ldr	r1, [pc, #84]	; (1d8c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1d36:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1d3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1d3e:	b121      	cbz	r1, 1d4a <usb_serial_configure+0xb6>
    1d40:	4a13      	ldr	r2, [pc, #76]	; (1d90 <usb_serial_configure+0xfc>)
    1d42:	7813      	ldrb	r3, [r2, #0]
    1d44:	f043 0301 	orr.w	r3, r3, #1
    1d48:	7013      	strb	r3, [r2, #0]
}
    1d4a:	bd70      	pop	{r4, r5, r6, pc}
    1d4c:	20001167 	.word	0x20001167
    1d50:	20001000 	.word	0x20001000
    1d54:	20001158 	.word	0x20001158
    1d58:	20001154 	.word	0x20001154
    1d5c:	20001163 	.word	0x20001163
    1d60:	20001156 	.word	0x20001156
    1d64:	20000f00 	.word	0x20000f00
    1d68:	200010ec 	.word	0x200010ec
    1d6c:	200010fc 	.word	0x200010fc
    1d70:	2000115e 	.word	0x2000115e
    1d74:	200010e8 	.word	0x200010e8
    1d78:	2000115f 	.word	0x2000115f
    1d7c:	00001995 	.word	0x00001995
    1d80:	402e0000 	.word	0x402e0000
    1d84:	2000114c 	.word	0x2000114c
    1d88:	00001a49 	.word	0x00001a49
    1d8c:	00000000 	.word	0x00000000
    1d90:	20001169 	.word	0x20001169

00001d94 <usb_serial_read>:
{
    1d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1d98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    1da0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1e6c <usb_serial_read+0xd8>
{
    1da4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1da6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    1daa:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    1dac:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    1db0:	2900      	cmp	r1, #0
    1db2:	d04f      	beq.n	1e54 <usb_serial_read+0xc0>
    1db4:	4680      	mov	r8, r0
    1db6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    1db8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    1dba:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1e70 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    1dbe:	4b26      	ldr	r3, [pc, #152]	; (1e58 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    1dc0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1dc4:	4925      	ldr	r1, [pc, #148]	; (1e5c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    1dca:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    1dce:	d03f      	beq.n	1e50 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    1dd0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    1dd2:	4b23      	ldr	r3, [pc, #140]	; (1e60 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1dd4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    1dd6:	bf28      	it	cs
    1dd8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1dda:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    1ddc:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1de0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    1de4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    1de6:	4b1f      	ldr	r3, [pc, #124]	; (1e64 <usb_serial_read+0xd0>)
    1de8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    1dec:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    1df0:	42aa      	cmp	r2, r5
    1df2:	d21c      	bcs.n	1e2e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1df4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    1df8:	4918      	ldr	r1, [pc, #96]	; (1e5c <usb_serial_read+0xc8>)
			rx_available -= len;
    1dfa:	4c1b      	ldr	r4, [pc, #108]	; (1e68 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1dfc:	4461      	add	r1, ip
    1dfe:	9201      	str	r2, [sp, #4]
    1e00:	f7fe ff1e 	bl	c40 <memcpy>
			rx_available -= len;
    1e04:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    1e06:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    1e0a:	4658      	mov	r0, fp
			rx_index[i] += len;
    1e0c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    1e0e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    1e12:	442a      	add	r2, r5
			rx_available -= len;
    1e14:	4439      	add	r1, r7
			rx_index[i] += len;
    1e16:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    1e1a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    1e28:	b003      	add	sp, #12
    1e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1e2e:	462a      	mov	r2, r5
			count += avail;
    1e30:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1e32:	f7fe ff05 	bl	c40 <memcpy>
			rx_available -= avail;
    1e36:	490c      	ldr	r1, [pc, #48]	; (1e68 <usb_serial_read+0xd4>)
			rx_tail = tail;
    1e38:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1e3a:	4630      	mov	r0, r6
			rx_available -= avail;
    1e3c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    1e3e:	44a8      	add	r8, r5
			rx_available -= avail;
    1e40:	1b52      	subs	r2, r2, r5
    1e42:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    1e44:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    1e48:	f7ff fd74 	bl	1934 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    1e4c:	45bb      	cmp	fp, r7
    1e4e:	d8b6      	bhi.n	1dbe <usb_serial_read+0x2a>
	return count;
    1e50:	4638      	mov	r0, r7
    1e52:	e7e3      	b.n	1e1c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    1e54:	4608      	mov	r0, r1
    1e56:	e7e1      	b.n	1e1c <usb_serial_read+0x88>
    1e58:	2000115e 	.word	0x2000115e
    1e5c:	20200080 	.word	0x20200080
    1e60:	2000110c 	.word	0x2000110c
    1e64:	200010ec 	.word	0x200010ec
    1e68:	200010e8 	.word	0x200010e8
    1e6c:	2000115f 	.word	0x2000115f
    1e70:	200010fc 	.word	0x200010fc

00001e74 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    1e74:	4b0b      	ldr	r3, [pc, #44]	; (1ea4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    1e76:	4a0c      	ldr	r2, [pc, #48]	; (1ea8 <usb_serial_peekchar+0x34>)
    1e78:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    1e7a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    1e7c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    1e7e:	428a      	cmp	r2, r1
    1e80:	d00d      	beq.n	1e9e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1e82:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1e84:	4809      	ldr	r0, [pc, #36]	; (1eac <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1e86:	4a0a      	ldr	r2, [pc, #40]	; (1eb0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    1e88:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1e8a:	490a      	ldr	r1, [pc, #40]	; (1eb4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    1e8c:	bf28      	it	cs
    1e8e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1e90:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1e92:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    1e96:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    1e9a:	5c58      	ldrb	r0, [r3, r1]
    1e9c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    1e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1ea2:	4770      	bx	lr
    1ea4:	2000115e 	.word	0x2000115e
    1ea8:	2000115f 	.word	0x2000115f
    1eac:	2000110c 	.word	0x2000110c
    1eb0:	20200080 	.word	0x20200080
    1eb4:	200010fc 	.word	0x200010fc

00001eb8 <usb_serial_available>:
	uint32_t n = rx_available;
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <usb_serial_available+0x14>)
{
    1eba:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1ebc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1ebe:	b10c      	cbz	r4, 1ec4 <usb_serial_available+0xc>
}
    1ec0:	4620      	mov	r0, r4
    1ec2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    1ec4:	f000 f8e0 	bl	2088 <yield>
}
    1ec8:	4620      	mov	r0, r4
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	200010e8 	.word	0x200010e8

00001ed0 <usb_serial_flush_input>:
{
    1ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1ed4:	4e14      	ldr	r6, [pc, #80]	; (1f28 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    1ed6:	4d15      	ldr	r5, [pc, #84]	; (1f2c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    1ed8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    1eda:	782a      	ldrb	r2, [r5, #0]
    1edc:	4293      	cmp	r3, r2
    1ede:	d021      	beq.n	1f24 <usb_serial_flush_input+0x54>
    1ee0:	b2dc      	uxtb	r4, r3
    1ee2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1f34 <usb_serial_flush_input+0x64>
    1ee6:	f8df b050 	ldr.w	fp, [pc, #80]	; 1f38 <usb_serial_flush_input+0x68>
    1eea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1f3c <usb_serial_flush_input+0x6c>
    1eee:	4f10      	ldr	r7, [pc, #64]	; (1f30 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    1ef0:	3401      	adds	r4, #1
    1ef2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    1ef4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    1ef8:	d901      	bls.n	1efe <usb_serial_flush_input+0x2e>
    1efa:	2400      	movs	r4, #0
    1efc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    1efe:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1f02:	f8db 3000 	ldr.w	r3, [fp]
    1f06:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    1f0a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    1f0e:	1a52      	subs	r2, r2, r1
    1f10:	1a9b      	subs	r3, r3, r2
    1f12:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1f16:	f7ff fd0d 	bl	1934 <rx_queue_transfer>
		rx_tail = tail;
    1f1a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    1f1e:	782b      	ldrb	r3, [r5, #0]
    1f20:	42a3      	cmp	r3, r4
    1f22:	d1e5      	bne.n	1ef0 <usb_serial_flush_input+0x20>
}
    1f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f28:	2000115f 	.word	0x2000115f
    1f2c:	2000115e 	.word	0x2000115e
    1f30:	200010fc 	.word	0x200010fc
    1f34:	2000110c 	.word	0x2000110c
    1f38:	200010e8 	.word	0x200010e8
    1f3c:	200010ec 	.word	0x200010ec

00001f40 <usb_serial_getchar>:
{
    1f40:	b500      	push	{lr}
    1f42:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    1f44:	2101      	movs	r1, #1
    1f46:	f10d 0007 	add.w	r0, sp, #7
    1f4a:	f7ff ff23 	bl	1d94 <usb_serial_read>
    1f4e:	b120      	cbz	r0, 1f5a <usb_serial_getchar+0x1a>
    1f50:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    1f54:	b003      	add	sp, #12
    1f56:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    1f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f5e:	e7f9      	b.n	1f54 <usb_serial_getchar+0x14>

00001f60 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    1f60:	4b09      	ldr	r3, [pc, #36]	; (1f88 <usb_serial_putchar+0x28>)
{
    1f62:	b500      	push	{lr}
    1f64:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    1f66:	781b      	ldrb	r3, [r3, #0]
{
    1f68:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    1f6c:	b13b      	cbz	r3, 1f7e <usb_serial_putchar+0x1e>
    1f6e:	2101      	movs	r1, #1
    1f70:	f10d 0007 	add.w	r0, sp, #7
    1f74:	f7ff fdb0 	bl	1ad8 <usb_serial_write.part.0>
}
    1f78:	b003      	add	sp, #12
    1f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f7e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1f82:	b003      	add	sp, #12
    1f84:	f85d fb04 	ldr.w	pc, [sp], #4
    1f88:	20001166 	.word	0x20001166

00001f8c <usb_serial_write>:
	if (!usb_configuration) return 0;
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <usb_serial_write+0x14>)
    1f8e:	781b      	ldrb	r3, [r3, #0]
    1f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1f94:	b10b      	cbz	r3, 1f9a <usb_serial_write+0xe>
    1f96:	f7ff bd9f 	b.w	1ad8 <usb_serial_write.part.0>
}
    1f9a:	4610      	mov	r0, r2
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	20001166 	.word	0x20001166

00001fa4 <usb_serial_write_buffer_free>:
{
    1fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    1fa8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    1faa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1ff0 <usb_serial_write_buffer_free+0x4c>
    1fae:	2301      	movs	r3, #1
    1fb0:	4d0d      	ldr	r5, [pc, #52]	; (1fe8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    1fb2:	4627      	mov	r7, r4
    1fb4:	4e0d      	ldr	r6, [pc, #52]	; (1fec <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    1fb6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    1fba:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1fbc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    1fbe:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    1fc0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    1fc2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1fc6:	d005      	beq.n	1fd4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1fc8:	f7ff fc76 	bl	18b8 <usb_transfer_status>
    1fcc:	0603      	lsls	r3, r0, #24
    1fce:	bf58      	it	pl
    1fd0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    1fd4:	2c04      	cmp	r4, #4
    1fd6:	d1f0      	bne.n	1fba <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    1fd8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    1fdc:	2300      	movs	r3, #0
}
    1fde:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    1fe0:	f888 3000 	strb.w	r3, [r8]
}
    1fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe8:	20001000 	.word	0x20001000
    1fec:	20001163 	.word	0x20001163
    1ff0:	20001164 	.word	0x20001164

00001ff4 <usb_serial_flush_output>:
{
    1ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    1ff8:	4b1d      	ldr	r3, [pc, #116]	; (2070 <usb_serial_flush_output+0x7c>)
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	b113      	cbz	r3, 2004 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1ffe:	4d1d      	ldr	r5, [pc, #116]	; (2074 <usb_serial_flush_output+0x80>)
    2000:	882a      	ldrh	r2, [r5, #0]
    2002:	b90a      	cbnz	r2, 2008 <usb_serial_flush_output+0x14>
}
    2004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2008:	4e1b      	ldr	r6, [pc, #108]	; (2078 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    200a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    200e:	491b      	ldr	r1, [pc, #108]	; (207c <usb_serial_flush_output+0x88>)
    2010:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2012:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2014:	4c1a      	ldr	r4, [pc, #104]	; (2080 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2016:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    201a:	4f1a      	ldr	r7, [pc, #104]	; (2084 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    201c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2020:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2022:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2024:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2026:	4621      	mov	r1, r4
    2028:	2300      	movs	r3, #0
    202a:	f7ff fc0b 	bl	1844 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    202e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2032:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2036:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    203a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    203e:	3420      	adds	r4, #32
	} while (location < end_addr);
    2040:	42a2      	cmp	r2, r4
    2042:	d8fa      	bhi.n	203a <usb_serial_flush_output+0x46>
	asm("dsb");
    2044:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2048:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    204c:	2004      	movs	r0, #4
    204e:	4641      	mov	r1, r8
    2050:	f7ff fc10 	bl	1874 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2054:	7833      	ldrb	r3, [r6, #0]
    2056:	3301      	adds	r3, #1
    2058:	b2db      	uxtb	r3, r3
    205a:	2b03      	cmp	r3, #3
    205c:	bf88      	it	hi
    205e:	2300      	movhi	r3, #0
    2060:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2062:	2300      	movs	r3, #0
    2064:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2066:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    206a:	703b      	strb	r3, [r7, #0]
}
    206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2070:	20001166 	.word	0x20001166
    2074:	20001156 	.word	0x20001156
    2078:	20001163 	.word	0x20001163
    207c:	20001000 	.word	0x20001000
    2080:	20201080 	.word	0x20201080
    2084:	20001164 	.word	0x20001164

00002088 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    208c:	4b2d      	ldr	r3, [pc, #180]	; (2144 <yield+0xbc>)
    208e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    2090:	b166      	cbz	r6, 20ac <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    2092:	4f2d      	ldr	r7, [pc, #180]	; (2148 <yield+0xc0>)
    2094:	783b      	ldrb	r3, [r7, #0]
    2096:	b94b      	cbnz	r3, 20ac <yield+0x24>
	running = 1;
    2098:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    209a:	07f1      	lsls	r1, r6, #31
	running = 1;
    209c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    209e:	d443      	bmi.n	2128 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    20a0:	07b2      	lsls	r2, r6, #30
    20a2:	d426      	bmi.n	20f2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    20a4:	2300      	movs	r3, #0
    20a6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    20a8:	0773      	lsls	r3, r6, #29
    20aa:	d401      	bmi.n	20b0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    20ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    20b0:	4b26      	ldr	r3, [pc, #152]	; (214c <yield+0xc4>)
    20b2:	681a      	ldr	r2, [r3, #0]
    20b4:	2a00      	cmp	r2, #0
    20b6:	d0f9      	beq.n	20ac <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    20b8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    20bc:	2a00      	cmp	r2, #0
    20be:	d1f5      	bne.n	20ac <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20c0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    20c4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    20c6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    20c8:	2800      	cmp	r0, #0
    20ca:	d034      	beq.n	2136 <yield+0xae>
		if (runningFromYield) {
    20cc:	4c20      	ldr	r4, [pc, #128]	; (2150 <yield+0xc8>)
    20ce:	7821      	ldrb	r1, [r4, #0]
    20d0:	2900      	cmp	r1, #0
    20d2:	d130      	bne.n	2136 <yield+0xae>
		runningFromYield = true;
    20d4:	2201      	movs	r2, #1
    20d6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    20d8:	6942      	ldr	r2, [r0, #20]
    20da:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    20dc:	2a00      	cmp	r2, #0
    20de:	d02e      	beq.n	213e <yield+0xb6>
			firstYield->_prev = nullptr;
    20e0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    20e2:	b905      	cbnz	r5, 20e6 <yield+0x5e>
    20e4:	b662      	cpsie	i
		first->_triggered = false;
    20e6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    20e8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    20ea:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    20ec:	4798      	blx	r3
		runningFromYield = false;
    20ee:	7025      	strb	r5, [r4, #0]
    20f0:	e7dc      	b.n	20ac <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    20f2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2158 <yield+0xd0>
    20f6:	f898 3000 	ldrb.w	r3, [r8]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d0d2      	beq.n	20a4 <yield+0x1c>
    20fe:	2500      	movs	r5, #0
    2100:	f8df 9058 	ldr.w	r9, [pc, #88]	; 215c <yield+0xd4>
    2104:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2106:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    210a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    210c:	6823      	ldr	r3, [r4, #0]
    210e:	4620      	mov	r0, r4
    2110:	691b      	ldr	r3, [r3, #16]
    2112:	4798      	blx	r3
    2114:	b110      	cbz	r0, 211c <yield+0x94>
    2116:	6963      	ldr	r3, [r4, #20]
    2118:	689b      	ldr	r3, [r3, #8]
    211a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    211c:	f898 2000 	ldrb.w	r2, [r8]
    2120:	b2eb      	uxtb	r3, r5
    2122:	429a      	cmp	r2, r3
    2124:	d8ef      	bhi.n	2106 <yield+0x7e>
    2126:	e7bd      	b.n	20a4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2128:	f7ff fec6 	bl	1eb8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    212c:	2800      	cmp	r0, #0
    212e:	d0b7      	beq.n	20a0 <yield+0x18>
    2130:	f3af 8000 	nop.w
    2134:	e7b4      	b.n	20a0 <yield+0x18>
		if (doit) __enable_irq();
    2136:	2d00      	cmp	r5, #0
    2138:	d1b8      	bne.n	20ac <yield+0x24>
    213a:	b662      	cpsie	i
    213c:	e7b6      	b.n	20ac <yield+0x24>
			lastYield = nullptr;
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <yield+0xcc>)
    2140:	601a      	str	r2, [r3, #0]
    2142:	e7ce      	b.n	20e2 <yield+0x5a>
    2144:	20001169 	.word	0x20001169
    2148:	2000115c 	.word	0x2000115c
    214c:	20001088 	.word	0x20001088
    2150:	2000115a 	.word	0x2000115a
    2154:	20001094 	.word	0x20001094
    2158:	2000115b 	.word	0x2000115b
    215c:	20001098 	.word	0x20001098

00002160 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2160:	49a2      	ldr	r1, [pc, #648]	; (23ec <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2162:	4ba3      	ldr	r3, [pc, #652]	; (23f0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2164:	4288      	cmp	r0, r1
{
    2166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    216a:	4ca2      	ldr	r4, [pc, #648]	; (23f4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    216c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    216e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2170:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2174:	d91b      	bls.n	21ae <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2176:	4ba0      	ldr	r3, [pc, #640]	; (23f8 <set_arm_clock+0x298>)
    2178:	4298      	cmp	r0, r3
    217a:	f240 8102 	bls.w	2382 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    217e:	1ac3      	subs	r3, r0, r3
    2180:	499e      	ldr	r1, [pc, #632]	; (23fc <set_arm_clock+0x29c>)
    2182:	0a1b      	lsrs	r3, r3, #8
    2184:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2188:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    218c:	09db      	lsrs	r3, r3, #7
    218e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2196:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    219a:	428b      	cmp	r3, r1
    219c:	bf28      	it	cs
    219e:	460b      	movcs	r3, r1
    21a0:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    21a4:	4b96      	ldr	r3, [pc, #600]	; (2400 <set_arm_clock+0x2a0>)
    21a6:	fba3 3707 	umull	r3, r7, r3, r7
    21aa:	08ff      	lsrs	r7, r7, #3
    21ac:	e004      	b.n	21b8 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    21ae:	4f95      	ldr	r7, [pc, #596]	; (2404 <set_arm_clock+0x2a4>)
    21b0:	42b8      	cmp	r0, r7
    21b2:	bf8c      	ite	hi
    21b4:	270e      	movhi	r7, #14
    21b6:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    21b8:	498d      	ldr	r1, [pc, #564]	; (23f0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    21ba:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    21be:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    21c2:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    21c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    21c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    21cc:	d20c      	bcs.n	21e8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    21ce:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    21d2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    21d6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    21da:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    21de:	680b      	ldr	r3, [r1, #0]
    21e0:	2b00      	cmp	r3, #0
    21e2:	dafc      	bge.n	21de <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    21e4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    21e8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    21ec:	d124      	bne.n	2238 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    21ee:	4986      	ldr	r1, [pc, #536]	; (2408 <set_arm_clock+0x2a8>)
    21f0:	690c      	ldr	r4, [r1, #16]
    21f2:	4986      	ldr	r1, [pc, #536]	; (240c <set_arm_clock+0x2ac>)
    21f4:	43a1      	bics	r1, r4
    21f6:	f000 80ea 	beq.w	23ce <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    21fa:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    21fe:	4634      	mov	r4, r6
    2200:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2204:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2208:	d004      	beq.n	2214 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    220a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    220e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    2210:	4b77      	ldr	r3, [pc, #476]	; (23f0 <set_arm_clock+0x290>)
    2212:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2214:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    2218:	d007      	beq.n	222a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    221a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    221e:	4974      	ldr	r1, [pc, #464]	; (23f0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2220:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    2222:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2224:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    2226:	071a      	lsls	r2, r3, #28
    2228:	d4fc      	bmi.n	2224 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    222a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    222e:	4a70      	ldr	r2, [pc, #448]	; (23f0 <set_arm_clock+0x290>)
    2230:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2232:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2234:	069b      	lsls	r3, r3, #26
    2236:	d4fc      	bmi.n	2232 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    2238:	4c75      	ldr	r4, [pc, #468]	; (2410 <set_arm_clock+0x2b0>)
    223a:	42a0      	cmp	r0, r4
    223c:	f200 80ce 	bhi.w	23dc <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    2240:	f04f 0c01 	mov.w	ip, #1
    2244:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    2246:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2248:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    224c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2250:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2254:	42a2      	cmp	r2, r4
    2256:	d818      	bhi.n	228a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2258:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    225c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2260:	f040 808d 	bne.w	237e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2264:	f1bc 0f04 	cmp.w	ip, #4
    2268:	f200 8091 	bhi.w	238e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    226c:	180a      	adds	r2, r1, r0
    226e:	42a2      	cmp	r2, r4
    2270:	f200 80a4 	bhi.w	23bc <set_arm_clock+0x25c>
    2274:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2278:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    227a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    227e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2282:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2286:	42a2      	cmp	r2, r4
    2288:	d9e6      	bls.n	2258 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    228a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    228e:	028c      	lsls	r4, r1, #10
    2290:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2294:	485f      	ldr	r0, [pc, #380]	; (2414 <set_arm_clock+0x2b4>)
    2296:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2298:	4a5f      	ldr	r2, [pc, #380]	; (2418 <set_arm_clock+0x2b8>)
    229a:	4290      	cmp	r0, r2
    229c:	d97f      	bls.n	239e <set_arm_clock+0x23e>
    229e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 2444 <set_arm_clock+0x2e4>
    22a2:	226c      	movs	r2, #108	; 0x6c
    22a4:	485d      	ldr	r0, [pc, #372]	; (241c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    22a6:	4d58      	ldr	r5, [pc, #352]	; (2408 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    22a8:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    22ac:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    22b0:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    22b4:	f8df c190 	ldr.w	ip, [pc, #400]	; 2448 <set_arm_clock+0x2e8>
    22b8:	ea0e 0c0c 	and.w	ip, lr, ip
    22bc:	45d4      	cmp	ip, sl
    22be:	d009      	beq.n	22d4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    22c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    22c4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    22c8:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    22cc:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    22ce:	682a      	ldr	r2, [r5, #0]
    22d0:	2a00      	cmp	r2, #0
    22d2:	dafc      	bge.n	22ce <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    22d4:	4a46      	ldr	r2, [pc, #280]	; (23f0 <set_arm_clock+0x290>)
    22d6:	6915      	ldr	r5, [r2, #16]
    22d8:	f005 0507 	and.w	r5, r5, #7
    22dc:	429d      	cmp	r5, r3
    22de:	d003      	beq.n	22e8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    22e0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    22e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    22e4:	03dd      	lsls	r5, r3, #15
    22e6:	d4fc      	bmi.n	22e2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    22e8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    22ec:	d009      	beq.n	2302 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    22ee:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    22f2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    22f6:	4a3e      	ldr	r2, [pc, #248]	; (23f0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    22f8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    22fa:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    22fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    22fe:	0799      	lsls	r1, r3, #30
    2300:	d4fc      	bmi.n	22fc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2302:	4947      	ldr	r1, [pc, #284]	; (2420 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    2304:	4a47      	ldr	r2, [pc, #284]	; (2424 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2306:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    2308:	4291      	cmp	r1, r2
    230a:	d83c      	bhi.n	2386 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    230c:	4b46      	ldr	r3, [pc, #280]	; (2428 <set_arm_clock+0x2c8>)
    230e:	09c9      	lsrs	r1, r1, #7
    2310:	fba3 3101 	umull	r3, r1, r3, r1
    2314:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2316:	1e4b      	subs	r3, r1, #1
    2318:	021b      	lsls	r3, r3, #8
    231a:	ea86 0203 	eor.w	r2, r6, r3
    231e:	f412 7f40 	tst.w	r2, #768	; 0x300
    2322:	d006      	beq.n	2332 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2324:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2328:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    232c:	4a30      	ldr	r2, [pc, #192]	; (23f0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    232e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    2330:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2332:	4a2f      	ldr	r2, [pc, #188]	; (23f0 <set_arm_clock+0x290>)
    2334:	6953      	ldr	r3, [r2, #20]
    2336:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    233a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    233c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    233e:	069b      	lsls	r3, r3, #26
    2340:	d4fc      	bmi.n	233c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2342:	4b3a      	ldr	r3, [pc, #232]	; (242c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2344:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2346:	fba3 2300 	umull	r2, r3, r3, r0
    234a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    234e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2352:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2356:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    235a:	4a35      	ldr	r2, [pc, #212]	; (2430 <set_arm_clock+0x2d0>)
    235c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    235e:	4a35      	ldr	r2, [pc, #212]	; (2434 <set_arm_clock+0x2d4>)
    2360:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2362:	4a35      	ldr	r2, [pc, #212]	; (2438 <set_arm_clock+0x2d8>)
    2364:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2366:	d208      	bcs.n	237a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2368:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    236c:	4a21      	ldr	r2, [pc, #132]	; (23f4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    236e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2372:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2374:	6813      	ldr	r3, [r2, #0]
    2376:	2b00      	cmp	r3, #0
    2378:	dafc      	bge.n	2374 <set_arm_clock+0x214>
	}

	return frequency;
}
    237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    237e:	4673      	mov	r3, lr
    2380:	e762      	b.n	2248 <set_arm_clock+0xe8>
    2382:	2712      	movs	r7, #18
    2384:	e718      	b.n	21b8 <set_arm_clock+0x58>
    2386:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    238a:	2104      	movs	r1, #4
    238c:	e7c5      	b.n	231a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    238e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2392:	4820      	ldr	r0, [pc, #128]	; (2414 <set_arm_clock+0x2b4>)
    2394:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2396:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2398:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    239a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    239e:	4a27      	ldr	r2, [pc, #156]	; (243c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    23a0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 244c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    23a4:	fba2 2000 	umull	r2, r0, r2, r0
    23a8:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    23aa:	4825      	ldr	r0, [pc, #148]	; (2440 <set_arm_clock+0x2e0>)
    23ac:	2a36      	cmp	r2, #54	; 0x36
    23ae:	bf38      	it	cc
    23b0:	2236      	movcc	r2, #54	; 0x36
    23b2:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    23b6:	ea42 0a0a 	orr.w	sl, r2, sl
    23ba:	e774      	b.n	22a6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    23bc:	ea4f 248c 	mov.w	r4, ip, lsl #10
    23c0:	2300      	movs	r3, #0
    23c2:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    23c6:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    23ca:	46ac      	mov	ip, r5
    23cc:	e762      	b.n	2294 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    23ce:	461d      	mov	r5, r3
    23d0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    23d4:	4611      	mov	r1, r2
    23d6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    23da:	e713      	b.n	2204 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    23dc:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    23de:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    23e2:	4602      	mov	r2, r0
    23e4:	4631      	mov	r1, r6
    23e6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    23e8:	46e6      	mov	lr, ip
    23ea:	e753      	b.n	2294 <set_arm_clock+0x134>
    23ec:	1f78a400 	.word	0x1f78a400
    23f0:	400fc000 	.word	0x400fc000
    23f4:	40080000 	.word	0x40080000
    23f8:	23c34600 	.word	0x23c34600
    23fc:	004cb223 	.word	0x004cb223
    2400:	51eb851f 	.word	0x51eb851f
    2404:	016e3600 	.word	0x016e3600
    2408:	400d8000 	.word	0x400d8000
    240c:	80003040 	.word	0x80003040
    2410:	269fb1ff 	.word	0x269fb1ff
    2414:	005b8d80 	.word	0x005b8d80
    2418:	4df67eff 	.word	0x4df67eff
    241c:	4d3f6400 	.word	0x4d3f6400
    2420:	08f0d17f 	.word	0x08f0d17f
    2424:	2cb4177f 	.word	0x2cb4177f
    2428:	00e5109f 	.word	0x00e5109f
    242c:	431bde83 	.word	0x431bde83
    2430:	200006f8 	.word	0x200006f8
    2434:	200006f4 	.word	0x200006f4
    2438:	20001128 	.word	0x20001128
    243c:	165e9f81 	.word	0x165e9f81
    2440:	00b71b00 	.word	0x00b71b00
    2444:	8000206c 	.word	0x8000206c
    2448:	8001307f 	.word	0x8001307f
    244c:	80002000 	.word	0x80002000

00002450 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2450:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    2452:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2454:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    2458:	4619      	mov	r1, r3
{
    245a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    245c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2460:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2464:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2468:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    246c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    2470:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    2472:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2476:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    247a:	b29b      	uxth	r3, r3
    247c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    2480:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2484:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    2488:	3101      	adds	r1, #1
    248a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    248e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2490:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2492:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2496:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2498:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    249a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    249c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    249e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    24a2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    24a4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    24a6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    24a8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    24aa:	d1eb      	bne.n	2484 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    24ac:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    24b0:	b29b      	uxth	r3, r3
    24b2:	f043 030f 	orr.w	r3, r3, #15
    24b6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    24ba:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    24be:	b29b      	uxth	r3, r3
    24c0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    24c4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    24c8:	bd10      	pop	{r4, pc}
    24ca:	bf00      	nop

000024cc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24cc:	4b37      	ldr	r3, [pc, #220]	; (25ac <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24ce:	4a38      	ldr	r2, [pc, #224]	; (25b0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24d0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    24d2:	4838      	ldr	r0, [pc, #224]	; (25b4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24d4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    24d8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24da:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24dc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24e0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24e4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24e8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24ec:	430a      	orrs	r2, r1
    24ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    24f2:	f7ff ffad 	bl	2450 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    24f6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    24fa:	f7ff ffa9 	bl	2450 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    24fe:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2502:	f7ff ffa5 	bl	2450 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    2506:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    250a:	f7ff ffa1 	bl	2450 <flexpwm_init>
	for (i=0; i < 4; i++) {
    250e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2510:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2514:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2518:	4611      	mov	r1, r2
    251a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    251e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2522:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2524:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2526:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2528:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    252a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    252e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2530:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2532:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2536:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2538:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    253a:	d1ee      	bne.n	251a <pwm_init+0x4e>
    253c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    253e:	481e      	ldr	r0, [pc, #120]	; (25b8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2540:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2544:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2548:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    254a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    254e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    2552:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2556:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    255a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    255c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    255e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2560:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2562:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2566:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2568:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    256a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    256e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2570:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2572:	d1ee      	bne.n	2552 <pwm_init+0x86>
    2574:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2576:	4811      	ldr	r0, [pc, #68]	; (25bc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2578:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    257a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    257e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2580:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2584:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    2588:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    258c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2590:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2592:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2594:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2596:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2598:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    259a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    259c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    259e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    25a2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    25a4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    25a8:	d1ee      	bne.n	2588 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    25aa:	bd70      	pop	{r4, r5, r6, pc}
    25ac:	400fc000 	.word	0x400fc000
    25b0:	fc030000 	.word	0xfc030000
    25b4:	403dc000 	.word	0x403dc000
    25b8:	401e0000 	.word	0x401e0000
    25bc:	401e4000 	.word	0x401e4000

000025c0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    25c0:	4a07      	ldr	r2, [pc, #28]	; (25e0 <rtc_get+0x20>)
    25c2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    25c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    25c6:	4619      	mov	r1, r3
    25c8:	4684      	mov	ip, r0
    25ca:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    25cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    25ce:	4299      	cmp	r1, r3
    25d0:	d1f9      	bne.n	25c6 <rtc_get+0x6>
    25d2:	4584      	cmp	ip, r0
    25d4:	d1f7      	bne.n	25c6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    25d6:	0bdb      	lsrs	r3, r3, #15
}
    25d8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	400d4000 	.word	0x400d4000

000025e4 <memset>:
    25e4:	0783      	lsls	r3, r0, #30
    25e6:	b530      	push	{r4, r5, lr}
    25e8:	d048      	beq.n	267c <memset+0x98>
    25ea:	1e54      	subs	r4, r2, #1
    25ec:	2a00      	cmp	r2, #0
    25ee:	d03f      	beq.n	2670 <memset+0x8c>
    25f0:	b2ca      	uxtb	r2, r1
    25f2:	4603      	mov	r3, r0
    25f4:	e001      	b.n	25fa <memset+0x16>
    25f6:	3c01      	subs	r4, #1
    25f8:	d33a      	bcc.n	2670 <memset+0x8c>
    25fa:	f803 2b01 	strb.w	r2, [r3], #1
    25fe:	079d      	lsls	r5, r3, #30
    2600:	d1f9      	bne.n	25f6 <memset+0x12>
    2602:	2c03      	cmp	r4, #3
    2604:	d92d      	bls.n	2662 <memset+0x7e>
    2606:	b2cd      	uxtb	r5, r1
    2608:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    260c:	2c0f      	cmp	r4, #15
    260e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2612:	d936      	bls.n	2682 <memset+0x9e>
    2614:	f1a4 0210 	sub.w	r2, r4, #16
    2618:	f022 0c0f 	bic.w	ip, r2, #15
    261c:	f103 0e20 	add.w	lr, r3, #32
    2620:	44e6      	add	lr, ip
    2622:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    2626:	f103 0210 	add.w	r2, r3, #16
    262a:	e942 5504 	strd	r5, r5, [r2, #-16]
    262e:	e942 5502 	strd	r5, r5, [r2, #-8]
    2632:	3210      	adds	r2, #16
    2634:	4572      	cmp	r2, lr
    2636:	d1f8      	bne.n	262a <memset+0x46>
    2638:	f10c 0201 	add.w	r2, ip, #1
    263c:	f014 0f0c 	tst.w	r4, #12
    2640:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2644:	f004 0c0f 	and.w	ip, r4, #15
    2648:	d013      	beq.n	2672 <memset+0x8e>
    264a:	f1ac 0304 	sub.w	r3, ip, #4
    264e:	f023 0303 	bic.w	r3, r3, #3
    2652:	3304      	adds	r3, #4
    2654:	4413      	add	r3, r2
    2656:	f842 5b04 	str.w	r5, [r2], #4
    265a:	4293      	cmp	r3, r2
    265c:	d1fb      	bne.n	2656 <memset+0x72>
    265e:	f00c 0403 	and.w	r4, ip, #3
    2662:	b12c      	cbz	r4, 2670 <memset+0x8c>
    2664:	b2c9      	uxtb	r1, r1
    2666:	441c      	add	r4, r3
    2668:	f803 1b01 	strb.w	r1, [r3], #1
    266c:	429c      	cmp	r4, r3
    266e:	d1fb      	bne.n	2668 <memset+0x84>
    2670:	bd30      	pop	{r4, r5, pc}
    2672:	4664      	mov	r4, ip
    2674:	4613      	mov	r3, r2
    2676:	2c00      	cmp	r4, #0
    2678:	d1f4      	bne.n	2664 <memset+0x80>
    267a:	e7f9      	b.n	2670 <memset+0x8c>
    267c:	4603      	mov	r3, r0
    267e:	4614      	mov	r4, r2
    2680:	e7bf      	b.n	2602 <memset+0x1e>
    2682:	461a      	mov	r2, r3
    2684:	46a4      	mov	ip, r4
    2686:	e7e0      	b.n	264a <memset+0x66>

00002688 <__libc_init_array>:
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	4e0d      	ldr	r6, [pc, #52]	; (26c0 <__libc_init_array+0x38>)
    268c:	4d0d      	ldr	r5, [pc, #52]	; (26c4 <__libc_init_array+0x3c>)
    268e:	1b76      	subs	r6, r6, r5
    2690:	10b6      	asrs	r6, r6, #2
    2692:	d006      	beq.n	26a2 <__libc_init_array+0x1a>
    2694:	2400      	movs	r4, #0
    2696:	f855 3b04 	ldr.w	r3, [r5], #4
    269a:	3401      	adds	r4, #1
    269c:	4798      	blx	r3
    269e:	42a6      	cmp	r6, r4
    26a0:	d1f9      	bne.n	2696 <__libc_init_array+0xe>
    26a2:	4e09      	ldr	r6, [pc, #36]	; (26c8 <__libc_init_array+0x40>)
    26a4:	4d09      	ldr	r5, [pc, #36]	; (26cc <__libc_init_array+0x44>)
    26a6:	1b76      	subs	r6, r6, r5
    26a8:	f000 f812 	bl	26d0 <___init_veneer>
    26ac:	10b6      	asrs	r6, r6, #2
    26ae:	d006      	beq.n	26be <__libc_init_array+0x36>
    26b0:	2400      	movs	r4, #0
    26b2:	f855 3b04 	ldr.w	r3, [r5], #4
    26b6:	3401      	adds	r4, #1
    26b8:	4798      	blx	r3
    26ba:	42a6      	cmp	r6, r4
    26bc:	d1f9      	bne.n	26b2 <__libc_init_array+0x2a>
    26be:	bd70      	pop	{r4, r5, r6, pc}
    26c0:	60001af0 	.word	0x60001af0
    26c4:	60001af0 	.word	0x60001af0
    26c8:	60001af8 	.word	0x60001af8
    26cc:	60001af0 	.word	0x60001af0

000026d0 <___init_veneer>:
    26d0:	f85f f000 	ldr.w	pc, [pc]	; 26d4 <___init_veneer+0x4>
    26d4:	60001aad 	.word	0x60001aad

000026d8 <___reboot_Teensyduino__veneer>:
    26d8:	f85f f000 	ldr.w	pc, [pc]	; 26dc <___reboot_Teensyduino__veneer+0x4>
    26dc:	60001a05 	.word	0x60001a05

Disassembly of section .fini:

000026e0 <_fini>:
    26e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26e2:	bf00      	nop
